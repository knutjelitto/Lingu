/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.4.0.0
 */
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace Lingu.Bootstrap
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	public class LinguParser : LRkParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly LRkAutomaton commonAutomaton = LRkAutomaton.Find(typeof(LinguParser), "LinguParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable file
			/// </summary>
			public const int VariableFile = 0x0018;
			/// <summary>
			/// The unique identifier for variable cf_grammar
			/// </summary>
			public const int VariableCfGrammar = 0x0019;
			/// <summary>
			/// The unique identifier for variable grammar_options
			/// </summary>
			public const int VariableGrammarOptions = 0x001A;
			/// <summary>
			/// The unique identifier for variable option
			/// </summary>
			public const int VariableOption = 0x001B;
			/// <summary>
			/// The unique identifier for variable grammar_terminals
			/// </summary>
			public const int VariableGrammarTerminals = 0x001C;
			/// <summary>
			/// The unique identifier for variable terminal_item
			/// </summary>
			public const int VariableTerminalItem = 0x001D;
			/// <summary>
			/// The unique identifier for variable terminal_rule
			/// </summary>
			public const int VariableTerminalRule = 0x001E;
			/// <summary>
			/// The unique identifier for variable terminal_fragment
			/// </summary>
			public const int VariableTerminalFragment = 0x001F;
			/// <summary>
			/// The unique identifier for variable terminal_context
			/// </summary>
			public const int VariableTerminalContext = 0x0020;
			/// <summary>
			/// The unique identifier for variable terminal_definition
			/// </summary>
			public const int VariableTerminalDefinition = 0x0021;
			/// <summary>
			/// The unique identifier for variable terminal_difference
			/// </summary>
			public const int VariableTerminalDifference = 0x0022;
			/// <summary>
			/// The unique identifier for variable terminal_sequence
			/// </summary>
			public const int VariableTerminalSequence = 0x0023;
			/// <summary>
			/// The unique identifier for variable terminal_repetition
			/// </summary>
			public const int VariableTerminalRepetition = 0x0024;
			/// <summary>
			/// The unique identifier for variable terminal_element
			/// </summary>
			public const int VariableTerminalElement = 0x0025;
			/// <summary>
			/// The unique identifier for variable terminal_atom
			/// </summary>
			public const int VariableTerminalAtom = 0x0026;
			/// <summary>
			/// The unique identifier for variable terminal_cardinalilty
			/// </summary>
			public const int VariableTerminalCardinalilty = 0x0027;
			/// <summary>
			/// The unique identifier for variable grammar_rules
			/// </summary>
			public const int VariableGrammarRules = 0x0028;
			/// <summary>
			/// The unique identifier for variable rule
			/// </summary>
			public const int VariableRule = 0x0029;
			/// <summary>
			/// The unique identifier for variable rule_simple
			/// </summary>
			public const int VariableRuleSimple = 0x002A;
			/// <summary>
			/// The unique identifier for variable rule_template
			/// </summary>
			public const int VariableRuleTemplate = 0x002B;
			/// <summary>
			/// The unique identifier for variable rule_definition
			/// </summary>
			public const int VariableRuleDefinition = 0x002C;
			/// <summary>
			/// The unique identifier for variable rule_def_choice
			/// </summary>
			public const int VariableRuleDefChoice = 0x002D;
			/// <summary>
			/// The unique identifier for variable rule_def_fragment
			/// </summary>
			public const int VariableRuleDefFragment = 0x002E;
			/// <summary>
			/// The unique identifier for variable rule_def_repetition
			/// </summary>
			public const int VariableRuleDefRepetition = 0x002F;
			/// <summary>
			/// The unique identifier for variable rule_def_tree_action
			/// </summary>
			public const int VariableRuleDefTreeAction = 0x0030;
			/// <summary>
			/// The unique identifier for variable rule_def_element
			/// </summary>
			public const int VariableRuleDefElement = 0x0031;
			/// <summary>
			/// The unique identifier for variable rule_def_atom
			/// </summary>
			public const int VariableRuleDefAtom = 0x0032;
			/// <summary>
			/// The unique identifier for variable rule_def_cardinality
			/// </summary>
			public const int VariableRuleDefCardinality = 0x0033;
			/// <summary>
			/// The unique identifier for variable rule_def_context
			/// </summary>
			public const int VariableRuleDefContext = 0x0034;
			/// <summary>
			/// The unique identifier for variable rule_def_sub
			/// </summary>
			public const int VariableRuleDefSub = 0x0035;
			/// <summary>
			/// The unique identifier for variable rule_sym_action
			/// </summary>
			public const int VariableRuleSymAction = 0x0036;
			/// <summary>
			/// The unique identifier for variable rule_sym_virtual
			/// </summary>
			public const int VariableRuleSymVirtual = 0x0037;
			/// <summary>
			/// The unique identifier for variable rule_sym_ref_simple
			/// </summary>
			public const int VariableRuleSymRefSimple = 0x0038;
			/// <summary>
			/// The unique identifier for variable rule_sym_ref_template
			/// </summary>
			public const int VariableRuleSymRefTemplate = 0x0039;
			/// <summary>
			/// The unique identifier for variable rule_sym_ref_params
			/// </summary>
			public const int VariableRuleSymRefParams = 0x003A;
			/// <summary>
			/// The unique identifier for variable rule_template_params
			/// </summary>
			public const int VariableRuleTemplateParams = 0x003B;
			/// <summary>
			/// The unique identifier for virtual range
			/// </summary>
			public const int VirtualRange = 0x0051;
			/// <summary>
			/// The unique identifier for virtual emptypart
			/// </summary>
			public const int VirtualEmptypart = 0x0056;
			/// <summary>
			/// The unique identifier for virtual concat
			/// </summary>
			public const int VirtualConcat = 0x0057;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x0018, "file"), 
			new Symbol(0x0019, "cf_grammar"), 
			new Symbol(0x001A, "grammar_options"), 
			new Symbol(0x001B, "option"), 
			new Symbol(0x001C, "grammar_terminals"), 
			new Symbol(0x001D, "terminal_item"), 
			new Symbol(0x001E, "terminal_rule"), 
			new Symbol(0x001F, "terminal_fragment"), 
			new Symbol(0x0020, "terminal_context"), 
			new Symbol(0x0021, "terminal_definition"), 
			new Symbol(0x0022, "terminal_difference"), 
			new Symbol(0x0023, "terminal_sequence"), 
			new Symbol(0x0024, "terminal_repetition"), 
			new Symbol(0x0025, "terminal_element"), 
			new Symbol(0x0026, "terminal_atom"), 
			new Symbol(0x0027, "terminal_cardinalilty"), 
			new Symbol(0x0028, "grammar_rules"), 
			new Symbol(0x0029, "rule"), 
			new Symbol(0x002A, "rule_simple"), 
			new Symbol(0x002B, "rule_template"), 
			new Symbol(0x002C, "rule_definition"), 
			new Symbol(0x002D, "rule_def_choice"), 
			new Symbol(0x002E, "rule_def_fragment"), 
			new Symbol(0x002F, "rule_def_repetition"), 
			new Symbol(0x0030, "rule_def_tree_action"), 
			new Symbol(0x0031, "rule_def_element"), 
			new Symbol(0x0032, "rule_def_atom"), 
			new Symbol(0x0033, "rule_def_cardinality"), 
			new Symbol(0x0034, "rule_def_context"), 
			new Symbol(0x0035, "rule_def_sub"), 
			new Symbol(0x0036, "rule_sym_action"), 
			new Symbol(0x0037, "rule_sym_virtual"), 
			new Symbol(0x0038, "rule_sym_ref_simple"), 
			new Symbol(0x0039, "rule_sym_ref_template"), 
			new Symbol(0x003A, "rule_sym_ref_params"), 
			new Symbol(0x003B, "rule_template_params"), 
			new Symbol(0x0040, "__V64"), 
			new Symbol(0x0044, "__V68"), 
			new Symbol(0x0048, "__V72"), 
			new Symbol(0x0049, "__V73"), 
			new Symbol(0x004A, "__V74"), 
			new Symbol(0x004B, "__V75"), 
			new Symbol(0x0054, "__V84"), 
			new Symbol(0x0055, "__V85"), 
			new Symbol(0x0058, "__V88"), 
			new Symbol(0x005C, "__V92"), 
			new Symbol(0x005E, "__V94"), 
			new Symbol(0x005F, "__VAxiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
			new Symbol(0x0051, "range"), 
			new Symbol(0x0056, "emptypart"), 
			new Symbol(0x0057, "concat") };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public LinguParser(LinguLexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }

		/// <summary>
		/// Visitor interface
		/// </summary>
		public class Visitor
		{
			public virtual void OnTerminalSeparator(ASTNode node) {}
			public virtual void OnTerminalName(ASTNode node) {}
			public virtual void OnTerminalInteger(ASTNode node) {}
			public virtual void OnTerminalLiteralString(ASTNode node) {}
			public virtual void OnTerminalLiteralAny(ASTNode node) {}
			public virtual void OnTerminalLiteralText(ASTNode node) {}
			public virtual void OnTerminalLiteralClass(ASTNode node) {}
			public virtual void OnTerminalUnicodeBlock(ASTNode node) {}
			public virtual void OnTerminalUnicodeCategory(ASTNode node) {}
			public virtual void OnTerminalUnicodeCodepoint(ASTNode node) {}
			public virtual void OnTerminalUnicodeSpanMarker(ASTNode node) {}
			public virtual void OnTerminalOperatorUnion(ASTNode node) {}
			public virtual void OnTerminalOperatorDifference(ASTNode node) {}
			public virtual void OnTerminalTreeActionPromote(ASTNode node) {}
			public virtual void OnTerminalTreeActionDrop(ASTNode node) {}
			public virtual void OnVariableFile(ASTNode node) {}
			public virtual void OnVariableCfGrammar(ASTNode node) {}
			public virtual void OnVariableGrammarOptions(ASTNode node) {}
			public virtual void OnVariableOption(ASTNode node) {}
			public virtual void OnVariableGrammarTerminals(ASTNode node) {}
			public virtual void OnVariableTerminalItem(ASTNode node) {}
			public virtual void OnVariableTerminalRule(ASTNode node) {}
			public virtual void OnVariableTerminalFragment(ASTNode node) {}
			public virtual void OnVariableTerminalContext(ASTNode node) {}
			public virtual void OnVariableTerminalDefinition(ASTNode node) {}
			public virtual void OnVariableTerminalDifference(ASTNode node) {}
			public virtual void OnVariableTerminalSequence(ASTNode node) {}
			public virtual void OnVariableTerminalRepetition(ASTNode node) {}
			public virtual void OnVariableTerminalElement(ASTNode node) {}
			public virtual void OnVariableTerminalAtom(ASTNode node) {}
			public virtual void OnVariableTerminalCardinalilty(ASTNode node) {}
			public virtual void OnVariableGrammarRules(ASTNode node) {}
			public virtual void OnVariableRule(ASTNode node) {}
			public virtual void OnVariableRuleSimple(ASTNode node) {}
			public virtual void OnVariableRuleTemplate(ASTNode node) {}
			public virtual void OnVariableRuleDefinition(ASTNode node) {}
			public virtual void OnVariableRuleDefChoice(ASTNode node) {}
			public virtual void OnVariableRuleDefFragment(ASTNode node) {}
			public virtual void OnVariableRuleDefRepetition(ASTNode node) {}
			public virtual void OnVariableRuleDefTreeAction(ASTNode node) {}
			public virtual void OnVariableRuleDefElement(ASTNode node) {}
			public virtual void OnVariableRuleDefAtom(ASTNode node) {}
			public virtual void OnVariableRuleDefCardinality(ASTNode node) {}
			public virtual void OnVariableRuleDefContext(ASTNode node) {}
			public virtual void OnVariableRuleDefSub(ASTNode node) {}
			public virtual void OnVariableRuleSymAction(ASTNode node) {}
			public virtual void OnVariableRuleSymVirtual(ASTNode node) {}
			public virtual void OnVariableRuleSymRefSimple(ASTNode node) {}
			public virtual void OnVariableRuleSymRefTemplate(ASTNode node) {}
			public virtual void OnVariableRuleSymRefParams(ASTNode node) {}
			public virtual void OnVariableRuleTemplateParams(ASTNode node) {}
			public virtual void OnVirtualRange(ASTNode node) {}
			public virtual void OnVirtualEmptypart(ASTNode node) {}
			public virtual void OnVirtualConcat(ASTNode node) {}
		}

		/// <summary>
		/// Walk the AST using a visitor
		/// </summary>
		public static void Visit(ParseResult result, Visitor visitor)
		{
			VisitASTNode(result.Root, visitor);
		}

		/// <summary>
		/// Walk the AST using a visitor
		/// </summary>
		public static void VisitASTNode(ASTNode node, Visitor visitor)
		{
			for (int i = 0; i < node.Children.Count; i++)
				VisitASTNode(node.Children[i], visitor);
			switch(node.Symbol.ID)
			{
				case 0x0007: visitor.OnTerminalSeparator(node); break;
				case 0x0009: visitor.OnTerminalName(node); break;
				case 0x000A: visitor.OnTerminalInteger(node); break;
				case 0x000C: visitor.OnTerminalLiteralString(node); break;
				case 0x000D: visitor.OnTerminalLiteralAny(node); break;
				case 0x000E: visitor.OnTerminalLiteralText(node); break;
				case 0x000F: visitor.OnTerminalLiteralClass(node); break;
				case 0x0010: visitor.OnTerminalUnicodeBlock(node); break;
				case 0x0011: visitor.OnTerminalUnicodeCategory(node); break;
				case 0x0012: visitor.OnTerminalUnicodeCodepoint(node); break;
				case 0x0013: visitor.OnTerminalUnicodeSpanMarker(node); break;
				case 0x0014: visitor.OnTerminalOperatorUnion(node); break;
				case 0x0015: visitor.OnTerminalOperatorDifference(node); break;
				case 0x0016: visitor.OnTerminalTreeActionPromote(node); break;
				case 0x0017: visitor.OnTerminalTreeActionDrop(node); break;
				case 0x0018: visitor.OnVariableFile(node); break;
				case 0x0019: visitor.OnVariableCfGrammar(node); break;
				case 0x001A: visitor.OnVariableGrammarOptions(node); break;
				case 0x001B: visitor.OnVariableOption(node); break;
				case 0x001C: visitor.OnVariableGrammarTerminals(node); break;
				case 0x001D: visitor.OnVariableTerminalItem(node); break;
				case 0x001E: visitor.OnVariableTerminalRule(node); break;
				case 0x001F: visitor.OnVariableTerminalFragment(node); break;
				case 0x0020: visitor.OnVariableTerminalContext(node); break;
				case 0x0021: visitor.OnVariableTerminalDefinition(node); break;
				case 0x0022: visitor.OnVariableTerminalDifference(node); break;
				case 0x0023: visitor.OnVariableTerminalSequence(node); break;
				case 0x0024: visitor.OnVariableTerminalRepetition(node); break;
				case 0x0025: visitor.OnVariableTerminalElement(node); break;
				case 0x0026: visitor.OnVariableTerminalAtom(node); break;
				case 0x0027: visitor.OnVariableTerminalCardinalilty(node); break;
				case 0x0028: visitor.OnVariableGrammarRules(node); break;
				case 0x0029: visitor.OnVariableRule(node); break;
				case 0x002A: visitor.OnVariableRuleSimple(node); break;
				case 0x002B: visitor.OnVariableRuleTemplate(node); break;
				case 0x002C: visitor.OnVariableRuleDefinition(node); break;
				case 0x002D: visitor.OnVariableRuleDefChoice(node); break;
				case 0x002E: visitor.OnVariableRuleDefFragment(node); break;
				case 0x002F: visitor.OnVariableRuleDefRepetition(node); break;
				case 0x0030: visitor.OnVariableRuleDefTreeAction(node); break;
				case 0x0031: visitor.OnVariableRuleDefElement(node); break;
				case 0x0032: visitor.OnVariableRuleDefAtom(node); break;
				case 0x0033: visitor.OnVariableRuleDefCardinality(node); break;
				case 0x0034: visitor.OnVariableRuleDefContext(node); break;
				case 0x0035: visitor.OnVariableRuleDefSub(node); break;
				case 0x0036: visitor.OnVariableRuleSymAction(node); break;
				case 0x0037: visitor.OnVariableRuleSymVirtual(node); break;
				case 0x0038: visitor.OnVariableRuleSymRefSimple(node); break;
				case 0x0039: visitor.OnVariableRuleSymRefTemplate(node); break;
				case 0x003A: visitor.OnVariableRuleSymRefParams(node); break;
				case 0x003B: visitor.OnVariableRuleTemplateParams(node); break;
				case 0x0051: visitor.OnVirtualRange(node); break;
				case 0x0056: visitor.OnVirtualEmptypart(node); break;
				case 0x0057: visitor.OnVirtualConcat(node); break;
			}
		}
	}
}
