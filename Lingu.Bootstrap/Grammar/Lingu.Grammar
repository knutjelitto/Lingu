grammar Lingu
{
    options
    {
        Start = file;
        Separator = separator;
    }

    terminals
    {
        newline
            : '\n'          // LF (Unix)
            | '\r' '\n'     // CR LF (Windows)
			| '\r'			// CR (MacOs)
			| U+0085        // NL Next line character
			| U+2028        // LS Line separator character
			| U+2029        // PS Paragraph separator character
            ;

        newlineChar
            : '\n'          // LF
            | '\r'          // CR
			| U+0085        // NL Next line character
			| U+2028        // LS Line separator character
			| U+2029        // PS Paragraph separator character
            ;

        whitespace
            : ' '
            | U+0009
            | U+000B
            | U+000C
            ;

        lineComment
            : '//' (. - newlineChar)*
            ;

        blockComment
            : '/*'  ((. - '*') | '*' (. - '/'))* '*/'
            ;

        separator
            : (newline | whitespace | lineComment | blockComment)*
            ;


        identifierStart
            : ('a' .. 'z' | 'A' .. 'Z' |  '_')
            ;

		identifierContinue
			: identifierStart | digit
			;

        identifier
            : identifierStart identifierContinue*
            ;

        digit
            : '0' .. '9'
            ;

        nonzeroDigit
            : '1' .. '9'
            ;

        zero
            : digit - nonzeroDigit
            ;

        number
            : zero
            | nonzeroDigit digit*
            ;

        hexdigit
            : '0' .. '9'
            | 'a' .. 'f'
            | 'A' .. 'f'
            ;

        escapes       
            : '\\\\'                        // Backslash
            | '\\0'                         // Unicode character 0
            | '\\a'                         // Alert (character 7)
            | '\\b'                         // Backspace (character 8)
            | '\\f'                         // Form feed (character 12)
            | '\\n'                         // New line (character 10)
            | '\\r'                         // Carriage return (character 13)
            | '\\t'                         // Horizontal tab (character 9)
            | '\\v'                         // Vertical quote (character 11)
            | '\\u{' hexdigit{1,6} '}'      // Unicode code point
            ;

        any
            : '.'
            ;

        text
            : '\'' ( (. '\'') | '\\\'' | escapes )+ '\''
            ;

        ucNameStart
            : 'a' .. 'z' | 'A' .. 'Z'
            ;

        ucNameInner
            : ucNameStart | '0' .. '9'  | '_' | '-' | ' '
            ;

        ucNameEnd
            : ucNameStart
            ;

        ucName
            : ucNameStart ucNameInner* ucNameEnd*
            ;

        ucBlock
            : '\\ub' '{' ucName '}'
            ;

        ucCategory
            : '\\uc' '{' ucName '}'
            ;

        ucCodepoint
            : '\\u{' hexDigit{1,6} '}'
            | ('u'|'U')'+' hexDigit{1,6}
            ;
    }
    rules
    {
        file
            : grammar
            ;

        grammar
            : ,'grammar' NAME ,'{' grammar_item+ ,'}'
            ;

        grammar_item^
            : grammar_options
            | grammar_terminals
            | grammar_rules
            ;

        /* OPTIONS */
        grammar_options
            : ,'options' ,'{' option* ,'}'
            ;

        option
            : NAME ,'=' NAME ,';'
            ;

        grammar_terminals
            : ,'terminals' ,'{' terminal_rule* ,'}'
            ;

        terminal_rule
            : NAME ,(':'|'->') terminal_expression,';'
            ;

        terminal_expression
            : terminal_difference (,'|' terminal_difference)*
            ;

        terminal_difference
            : terminal_sequence (,'-' terminal_sequence)*
            ;

        terminal_sequence
            : terminal_repetition terminal_repetition*
            ;

        terminal_repetition     
            : terminal_element terminal_cardinalilty?
            ;

        terminal_element^
            : terminal_atom
            | terminal_not
            | ,'(' terminal_expression ,')'
            ;

        terminal_not
            : ,'~' terminal_element
            ;

        terminal_atom^
            : any
            | text
            | range
            | ucCodepoint
            | ucBlock
            | ucCategory
            | reference
            ;

        range
            : character ,'..' character
            ;

        character
            : ucCodepoint
            | text
            ;

        terminal_cardinalilty
            -> '?'^
            |  '*'^
            |  '+'^
            |  "range"^ '{'! INTEGER (','! INTEGER)? '}'!
            ;

        /* RULES */
            grammar_rules
                -> 'rules'! '{'! rule* '}'!
                ;

            rule                        
                -> NAME promoteAll (':'|'->')! rule_expression ';'!
                ;

            promoteAll
                -> '^'?
                | // epsilon
                ;

            rule_expression
                -> rule_alternative ('|'! rule_alternative)*
                ;

            rule_alternative
                -> rule_sequence
                | // epsilon
                ;

            rule_sequence
                -> rule_repetition+
                ;

            rule_repetition
                -> rule_drop_action ('?' | '*' | '+')?
                ;

            rule_drop_action
                -> ','? rule_element
                ;

            rule_element
                -> rule_sub^
                |  '('! rule_expression^ ')'!
                |  rule_atom^
                ;

            rule_sub 
                -> '{'! NAME (':'|'->')! rule_expression '}'!
                ;

            rule_atom
                -> reference^
                |  text^
                ;

            reference
                -> NAME
                ;
    }
}
