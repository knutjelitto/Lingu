grammar Expression
{
    options
    {
        Axiom = "Expression";
        Separator = "separator";
    }

    terminals
    {
        newline
            | \u{000D}          // CR
            | \u{000A}          // LF
            | \u{000D} \u{000A} // CR LF
			| \u{0085}          // NL Next line character
			| \u{2028}          // LS Line separator character
			| \u{2029}          // PS Paragraph separator character
            ;

        newlineChar
            | \u{000D}          // CR
            | \u{000A}          // LF
			| \u{0085}          // NL Next line character
			| \u{2028}          // LS Line separator character
			| \u{2029}          // PS Paragraph separator character
            ;

        whitespace
            | \uc{Zs}
            | \u{0009}
            | \u{000B}
            | \u{000C}
            ;

        lineComment
            | '//' ~newlineChar*
            ;

        blockComment
            | '/*'  ( ~'*' | '*' ~'/')* '*/'
            ;

        separator
            | (newline | whitespace | lineComment | blockComment)+
            ;

        identifier
            | ('a' .. 'z' | 'A' .. 'Z' |  '_') ('a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_')*
            ;

        number
            | '1' .. '9' ('0' .. '9')* | '0'
            ;
    }
    rules
    {
        expression
            | shiftExpression
            ;

        shiftExpression
            | {shlOp: shiftExpression 'shl'! addExpression}^
            | "shrOp"^ shiftExpression 'shr'! addExpression
            | addExpression^
            ;

        addExpression
            | "addOp"^ addExpression '+'! mulExpression
            | "subOp"^ addExpression '-'! mulExpression
            | mulExpression^
            ;

        mulExpression
            | "mulOp"^ mulExpression '*'! primaryExpression
            | "divOp"^ mulExpression '/'! primaryExpression
            | "remOp"^ mulExpression '%'! primaryExpression
            | "modOp"^ mulExpression 'mod'! primaryExpression
            | primaryExpression^
            ;

        prefixExpression
            | '-' prefixExpression
            | primaryExpression
            ;

        primaryExpression
            | identifier^
            | number^
            | '('! expression^ ')'!
            ;
    }
}
