grammar Expression
{
    options
    {
        Axiom = 'expression';
        Separator = 'separator';
    }
    terminals
    {
        newline
            : U+000A        // LF
            | U+000D U+000A // CR LF
			| U+0085        // NL Next line character
			| U+2028        // LS Line separator character
			| U+2029        // PS Paragraph separator character
            ;

        newlineChar
            : U+000A        // LF
            | U+000D        // CR
			| U+0085        // NL Next line character
			| U+2028        // LS Line separator character
			| U+2029        // PS Paragraph separator character
            ;

        whitespace
            : ' '
            | U+0009
            | U+000B
            | U+000C
            ;

        lineComment
            : '//' (. - newline)* newline?
            ;

        blockComment
            : '/*'  ((. - '*') | '*' (. - '/'))* '*/'
            ;

        separator
            : (newline | whitespace | lineComment | blockComment)+
            ;

        identifierStart
            : ('a' .. 'z' | 'A' .. 'Z' |  '_')
            ;

		identifierContinue
			: identifierStart | digit
			;

        identifier
            : identifierStart identifierContinue*
            ;

        digit
            : '0' .. '9'
            ;

        nonzeroDigit
            : '1' .. '9'
            ;

        zero
            : digit - nonzeroDigit
            ;

        number
            : zero
            | nonzeroDigit digit*
            ;
    }
    rules
    {
        expression
            : shiftExpression
            ;

        shiftExpression
            : {shlOp: shiftExpression '<<'! addExpression}^
            | {shrOp: shiftExpression '>>'! addExpression}^
            | addExpression^
            ;

        addExpression
            : {addOp: addExpression '+'! mulExpression}^
            | {subOp: addExpression '-'! mulExpression}^
            | mulExpression^
            ;

        mulExpression
            : {mulOp: mulExpression '*'! primaryExpression}^
            | {divOp: mulExpression '/'! primaryExpression}^
            | {remOp: mulExpression '%'! primaryExpression}^
            | {modOp: mulExpression 'mod'! primaryExpression}^
            | primaryExpression^
            ;

        prefixExpression
            : {negOp: '-' prefixExpression}^
            | primaryExpression^
            ;

        primaryExpression
            : identifier^
            | number^
            | '('! expression^ ')'!
            ;
    }
}
