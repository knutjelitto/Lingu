/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.4.0.0
 */
using System.Collections.Generic;
using System.IO;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace Lingu.Bootstrap
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	public class LinguLexer : ContextFreeLexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton commonAutomaton = Automaton.Find(typeof(LinguLexer), "LinguLexer.bin");
		/// <summary>
		/// Contains the constant IDs for the terminals for this lexer
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for terminal BLOCK_COMMENT
			/// </summary>
			public const int TerminalBlockComment = 0x0007;
			/// <summary>
			/// The unique identifier for terminal SEPARATOR
			/// </summary>
			public const int TerminalSeparator = 0x0008;
			/// <summary>
			/// The unique identifier for terminal NAME
			/// </summary>
			public const int TerminalName = 0x000A;
			/// <summary>
			/// The unique identifier for terminal INTEGER
			/// </summary>
			public const int TerminalInteger = 0x000B;
			/// <summary>
			/// The unique identifier for terminal LITERAL_STRING
			/// </summary>
			public const int TerminalLiteralString = 0x000D;
			/// <summary>
			/// The unique identifier for terminal LITERAL_ANY
			/// </summary>
			public const int TerminalLiteralAny = 0x000E;
			/// <summary>
			/// The unique identifier for terminal LITERAL_TEXT
			/// </summary>
			public const int TerminalLiteralText = 0x000F;
			/// <summary>
			/// The unique identifier for terminal LITERAL_CLASS
			/// </summary>
			public const int TerminalLiteralClass = 0x0010;
			/// <summary>
			/// The unique identifier for terminal UNICODE_BLOCK
			/// </summary>
			public const int TerminalUnicodeBlock = 0x0011;
			/// <summary>
			/// The unique identifier for terminal UNICODE_CATEGORY
			/// </summary>
			public const int TerminalUnicodeCategory = 0x0012;
			/// <summary>
			/// The unique identifier for terminal UNICODE_CODEPOINT
			/// </summary>
			public const int TerminalUnicodeCodepoint = 0x0013;
		}
		/// <summary>
		/// Contains the constant IDs for the contexts for this lexer
		/// </summary>
		public class Context
		{
			/// <summary>
			/// The unique identifier for the default context
			/// </summary>
			public const int Default = 0;
		}
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x0001, "Îµ"),
			new Symbol(0x0002, "$"),
			new Symbol(0x0007, "BLOCK_COMMENT"),
			new Symbol(0x0008, "SEPARATOR"),
			new Symbol(0x000A, "NAME"),
			new Symbol(0x000B, "INTEGER"),
			new Symbol(0x000D, "LITERAL_STRING"),
			new Symbol(0x000E, "LITERAL_ANY"),
			new Symbol(0x000F, "LITERAL_TEXT"),
			new Symbol(0x0010, "LITERAL_CLASS"),
			new Symbol(0x0011, "UNICODE_BLOCK"),
			new Symbol(0x0012, "UNICODE_CATEGORY"),
			new Symbol(0x0013, "UNICODE_CODEPOINT"),
			new Symbol(0x0033, "grammar"),
			new Symbol(0x0034, "{"),
			new Symbol(0x0035, "}"),
			new Symbol(0x0036, "options"),
			new Symbol(0x0038, "="),
			new Symbol(0x0039, ";"),
			new Symbol(0x003A, "terminals"),
			new Symbol(0x003C, ":"),
			new Symbol(0x003D, "|"),
			new Symbol(0x003F, "-"),
			new Symbol(0x0042, "("),
			new Symbol(0x0043, ")"),
			new Symbol(0x0044, "~"),
			new Symbol(0x0045, ".."),
			new Symbol(0x0046, "?"),
			new Symbol(0x0047, "*"),
			new Symbol(0x0048, "+"),
			new Symbol(0x004A, ","),
			new Symbol(0x004B, "rules"),
			new Symbol(0x004D, "->"),
			new Symbol(0x0050, "!"),
			new Symbol(0x0051, "^"),
			new Symbol(0x0052, "@") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public LinguLexer(string input) : base(commonAutomaton, terminals, 0x0008, input) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public LinguLexer(TextReader input) : base(commonAutomaton, terminals, 0x0008, input) {}
	}
}
