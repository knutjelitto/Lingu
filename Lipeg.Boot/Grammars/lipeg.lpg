grammar lipeg
{
    options
    {
        spacing = _;
    }

    rules
    {
        start
            <= _ grammar EOF
            ;

        grammar
            <= 'grammar' _ '{' _ s:options r:rules '}' _
            ;

        options
            <= 'options' _ '{' _ s:option* '}' _
            ;

        option
            <= '@' _ id:identifier '=' _ v:optionValue
            ;

        optionValue
            <= qualifiedIdentifier
            ;

        qualifiedIdentifier
            <= ids:(identifier ('.' _ identifier)*)
            ;

        rules
            <= 'rules' _ '{' _ r:rule* '}' _
            ;

        rule
            <= identifier ruleFlags '<=' _ expression ';' _
            ;

        ruleFlags
            <= ruleFlag*
            ;

        ruleFlag
            <= '-' identifier
            ;

        expression
            <= choice
            ;

        choice
            <= sequence ('/' _ sequence)*
            ;

        sequence
            <= prefix*
            ;

        prefix
            <= '&' _ suffix // and lookahead
            /  '!' _ suffix // not lookahead
            /  ':' _ suffix // drop
            /  '^' _ suffix // promote
            /  '~' _ suffix // fuse
            /  suffix
            ;

        suffix
            <= primary '?' _ 
            /  primary '*' _
            /  primary '+' _
            /  primary
            ;

        primary
            <= identifier
            /  string
            /  characterClass
            /  '.' _
            /  '(' _ expression ')' _
            ;
    }

    lexical
    {
        identifier
            <= (letter / '_') (letter / digit / '_')*
            ;

        letter
            <= [a-zA-Z]
            ;

        digit
            <= [0-9]
            ;

        hexDigit
            <= [0-9a-fA-F]
            ;

        string
            <= '\'' character* '\''
            ;

        character
            <= !('\'' / '\\' / eolChar) .
            /  escape
            /  unicode
            ;

        escape
            <= '\\' [0abefnrtv\-\]\\]
            ;

        unicode
            <= '\\u{' hexdigit hexdigit? hexdigit? hexdigit? hexdigit? hexdigit? '}'
            ;

        characterClass
            <= '[' '^'? classCharacter* ']'
            ;

        classCharacter
            <= classRange
            /  classSingle
            ;

        classRange
            <= classSingle '-' classSingle
            ;

        classSingle
            <= !(']' / '\\' / eolChar) .
            / escape
            / unicode
            ;

        _ -memo
            <= (whitespace / newline / comment)*
            ;

        comment
            <= singleLineComment
            / multiLineComment
            ;

        singleLineComment
            <= '//' (!eolChar .)*
            ;

        multiLineComment
            <= '/*' (!'*/' .)* '*/'
            ;

        newline
            <= '\n'
            / '\r\n'
            / '\r'
            / '\u{2028}'
            / '\u{2029}'
            ;

        eolChar
            <= [\n\r\u{2028}\u{2029}]
            ;

        whitespace
            <= [ \t\v\f\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]
            ;

        eof
            <= !.
            ;
    }
}