grammar lipeg
{
    options
    {
        start = start;
        spacing = _;
    }

    rules
    {
        start <=
            grammar eof
            ;

        grammar <=
            ,'grammar' identifier ,'{' ^(options / syntax / lexical)* ,'}'
            ;

        options <=
            ,'options' ,'{' ^option* ,'}'
            ;

        option <=
            identifier ,'=' option-value ,';'
            ;

        option-value <=
            qualified-identifier
            ;

        qualified-identifier <=
            identifier ^(,'.' identifier)*
            ;

        syntax <=
            ,'rules' ,'{' rules ,';'? ,'}'
            ;

        lexical <=
            ,'lexical' ,'{' rules ,';'? ,'}'
            ;

        rules <=
            ^(rule ^(,';' rule)*)?
            ;

        rule <= 
            identifier ,'<=' ,'/'? expression
            ;

        expression <=
            ^choice
            ;

        choice <=
            sequence ^(,'/' sequence)*
            ;

        sequence <=
            ^prefix+
            ;

        prefix <=
            / (and  <= ,'&' suffix)
            / (not  <= ,'!' suffix)
            / (drop <= ,',' suffix)
            / (fuse <= ,'~' suffix)
            / (lift <= ,'^' suffix)
            / suffix
            ;

        suffix <=
            / (zero-or-one  <= primary ,'?')
            / (zero-or-more <= primary ,'*')
            / (one-or-more  <= primary ,'+')
            / primary
            ;

        primary <=
            / identifier
            / string
            / character-class
            / any
            / epsilon
            / inline
            / ,'(' expression ,')'
            ;

        inline <=
            / ,'(' ^rule ,')'
            ;

        any <=
            ,'.'
            ;

        epsilon <=
            / 'epsilon'
            / 'ε'
            ;

        eof <= 
            !.
            ;
    }

    lexical
    {
        identifier <=
            / letter ^letter-or-digit* ^('-' ^letter-or-digit+)*
            / '_'
            ;

        letter <=
            / [a-zA-Z]
            ;

        letter-or-digit <=
            / [a-zA-Z0-9]
            ;

        hex-digit <=
            / [0-9a-fA-F]
            ;

        string <=
            ,'\'' character* ,'\''
            ;

        character <=
            / !('\'' / '\\' / eol-char) .
            / any-escape
            / unicode-escape
            / byte-escape
            ;

        any-escape <=
            ,'\\' [0abefnrtv\-\]\\\']
            ;


        unicode-escape <=
            ,('\\u{' _) unicode-number ,_ ^(unicode-number ,_)* ,'}'
            ;

        unicode-number <=
            hex-digit ^hex-digit? ^hex-digit? ^hex-digit? ^hex-digit? ^hex-digit?
            ;
        
        byte-escape <=
            ,('\\x{' _) byte-number ,_ ^(byte-number ,_)* ,'}'
            ;

        byte-number <=
            hex-digit ^hex-digit?
            ;

        character-class <=
            ,'[' '^'? class-part* ,']'
            ;

        class-part <=
            / class-range
            / class-char
            ;

        class-range <=
            class-char ,'-' class-char
            ;

        class-char <=
            / !(']' / '\\' / eol-char) .
            / any-escape
            / unicode-escape
            / byte-escape
            ;

        _ <= 
            (whitespace / newline / comment)*
            ;

        comment <=
            / single-line-comment
            / multi-line-comment
            ;

        single-line-comment <=
            '//' (!eol-char .)*
            ;

        multi-line-comment <=
            '/*' (!'*/' .)* '*/'
            ;

        newline <=
            / '\n'
            / '\r\n'
            / '\r'
            / '\u{2028}'
            / '\u{2029}'
            ;

        eol-char <=
            [\n\r\u{2028}\u{2029}]
            ;

        whitespace <=
            [ \t\v\f\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]
            ;
    }
}