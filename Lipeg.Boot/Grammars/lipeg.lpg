grammar lipeg
{
    options
    {
        start = start;
        spacing = _;
    }

    rules
    {
        start <=
            grammar EOF
            ;

        opel <=
            opel
            ;

        grammar <=
            ,'grammar' ,'{' ^(options / syntax / lexical)* ,'}'
            ;

        options <=
            ,'options' ,'{' option* ,'}'
            ;

        option <=
            identifier ,'=' optionValue
            ;

        optionValue <=
            qualifiedIdentifier
            ;

        qualifiedIdentifier <=
            identifier ^(,'.' identifier)*
            ;

        syntax <=
            ,'rules' ,'{' rule* ,'}'
            ;

        lexical <=
            ,'lexical' ,'{' rule* ,'}'
            ;

        rule <= 
            identifier ruleFlags ,'<=' expression ,';'
            ;

        ruleFlags <=
            ^ruleFlag*
            ;

        ruleFlag <=
            '-' identifier
            ;

        expression <=
            choice
            ;

        choice <=
            sequence ^(,'/' sequence)*
            ;

        sequence <=
            ^aliased*
            ;

        aliased <=
            / prefix ':' identifier
            / prefix
            ;

        prefix <=
            / '&' suffix // and lookahead
            / '!' suffix // not lookahead
            / ',' suffix // drop
            / '^' suffix // lift
            / '~' suffix // fuse
            / suffix
            ;

        suffix <=
            / primary '?'
            / primary '*'
            / primary '+'
            / primary
            ;

        primary <=
            / identifier
            / string
            / characterClass
            / any
            / ,'(' expression ,')'
            ;

        any <=
            ,'.'
            ;
    }

    lexical
    {
        identifier <=
            (letter / '_') (letter / digit / '_')*
            ;

        letter <=
            [a-zA-Z]
            ;

        digit <=
            [0-9]
            ;

        hexDigit <=
            [0-9a-fA-F]
            ;

        string <=
            '\'' character* '\''
            ;

        character <=
            / !('\'' / '\\' / eolChar) .
            / escape
            / unicode
            ;

        escape <=
            '\\' [0abefnrtv\-\]\\]
            ;

        unicode <=
            '\\u{' hexdigit hexdigit? hexdigit? hexdigit? hexdigit? hexdigit? '}'
            ;

        characterClass <=
            '[' '^'? classCharacter* ']'
            ;

        classCharacter <=
            / classRange
            / classSingle
            ;

        classRange <=
            classSingle '-' classSingle
            ;

        classSingle <=
            / !(']' / '\\' / eolChar) .
            / escape
            / unicode
            ;

        _ <= 
            (whitespace / newline / comment)*
            ;

        comment <=
            / singleLineComment
            / multiLineComment
            ;

        singleLineComment <=
            '//' (!eolChar .)*
            ;

        multiLineComment <=
            '/*' (!'*/' .)* '*/'
            ;

        newline <=
            / '\n'
            / '\r\n'
            / '\r'
            / '\u{2028}'
            / '\u{2029}'
            ;

        eolChar <=
            [\n\r\u{2028}\u{2029}]
            ;

        whitespace <=
            [ \t\v\f\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]
            ;

        eof <= 
            !.
            ;
    }
}