@namespace Lipeg.Boot
@classname LipegParser
@using Pegasus.Parser
@using Lipeg.Boot.Tree
@using System.Globalization
@using System.Linq
@using System.Text.RegularExpressions
@using Microsoft.CodeAnalysis.CSharp.Syntax
@members
{
    private readonly CSharpParser cSharpParser = new CSharpParser();
}

grammar <Grammar>
    = _ settings:setting<0,,_> _ rules:rule<0,,_> _ EOF                                         { Grammar(rules, settings, rulesEnd) }

setting <Setting>
    = key:settingName _ value:(<object> type / identifier / string / code) (_ semicolon)?       { Setting(key, value) }

settingName <Identifier> -lexical
    = "@" id:identifier                                                                         { id }

rulePreamble
    = (!quantifier expressionType _)? ruleFlag<0,,_> _ equals

rule <Rule>
    = name:ruleName _ type:expressionType? _ flags:ruleFlag<0,,_> _ equals _ expression:expression _ semicolon?
                                                                                                { Rule(name, type, flags, expression) }

ruleName -lexical
    = identifier

ruleFlag <Identifier> -memoize -lexical
    = "-" flag:identifier                                                                       { flag }

expression <Expression>
    = choice

expressionType <CodeSpan> -memoize
    = lt _ name:type _ (gt / #error{ "PEG0014:" + Resources.PEG0014_ERROR_PARSER_InvalidType }) { name }
    / &lt #error{ "PEG0014:" + Resources.PEG0014_ERROR_PARSER_InvalidType }

choice <Expression>
    = choices:sequence<1,,_ slash _>                                                            { Choice(choices) }

sequence <Expression>
    = elements:labeled<0,,_> _ action:resultAction                                              { Sequence(elements, action) }
    / elements:labeled<0,,_>                                                                    { Sequence(elements) }

labeled <Expression> -memoize
    = label:identifier _ colon _ expression:prefixed                                            { Prefixed(label, expression) }
    / prefixed
    / stateAction
    / errorAction

prefixed <Expression>
    = and _ c:delimitedExpression                                                               { AndCode(c) }
    / and _ e:suffix                                                                            { And(e) }
    / not _ c:delimitedExpression                                                               { NotCode(c) }
    / not _ e:suffix                                                                            { Not(e) }
    / suffix

suffix <Expression>
    = expression:primary _ q:quantifier                                                         { Repetition(expression, q) }
    / primary

primary <Expression> -memoize
    = id:ruleName !(_ rulePreamble)                                                             { Name(id) }
    / literal
    / class
    / dot                                                                                       { Wildcard() }
    / lparen _ type:expressionType? _ expression:expression _ rparen                            { Typed(type, expression) }
    / parseAction

quantifier <Quantifier> -memoize
    = q:question                                                                                { Quantifier(qStart, qEnd, min: 0, max: 1) }
    / q:star                                                                                    { Quantifier(qStart, qEnd, min: 0, max: null) }
    / q:plus                                                                                    { Quantifier(qStart, qEnd, min: 1, max: null) }
    / start:lt _ min:integer _ comma _ max:integer? _ comma _ delimiter:expression _ end:gt     { Quantifier(startStart, endEnd, min: min, max: max.Cast<int?>().SingleOrDefault(), delimiter: delimiter) }
    / start:lt _ min:integer _ comma _ max:integer? _ end:gt                                    { Quantifier(startStart, endEnd, min: min, max: max.Cast<int?>().SingleOrDefault()) }
    / start:lt _ count:integer _ end:gt                                                         { Quantifier(startStart, endEnd, min: count, max: count) }

integer <int> -memoize -lexical
    = digits:(digit+ "")                                                                        { Int(digits) }

errorAction <CodeExpression> -memoize
    = errorActionType code:delimitedExpression                                                  { CodeError(code) }

parseAction <CodeExpression> -memoize
    = parseActionType code:delimitedExpression                                                  { CodeParse(code) }

stateAction <CodeExpression> -memoize
    = stateActionType code:delimitedStatements                                                  { CodeState(code) }

resultAction <CodeExpression> -memoize
    = code:delimitedExpression                                                                  { CodeResult(code) }

errorActionType -lexical = "#error"i
parseActionType -lexical = "#parse"i
stateActionType -lexical = "#" "state"i?

delimitedExpression <CodeSpan> -lexical
    = "{" _ e:cSharpExpression _ ("}" / #error{ "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode }) { new CodeSpan(e.ToFullString(), eStart, eEnd) }
    / "{" _ b:cSharpBlock      _ ("}" / #error{ "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode }) { new CodeSpan(b.ToFullString(), bStart, bEnd) }
    / "{" #error{ "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode }

delimitedStatements <CodeSpan> -lexical
  = &"{" b:cSharpBlock { new CodeSpan(b.ToFullString(), bStart, bEnd) }
  / "{" #error{ "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode }

cSharpBlock <BlockSyntax>
  = s:cSharpStatement &{ s is BlockSyntax } { s as BlockSyntax }

cSharpExpression <ExpressionSyntax> -memoize
  = #parse{ this.cSharpParser.Exported.Expression(ref state) }

cSharpStatement <StatementSyntax> -memoize
  = #parse{ this.cSharpParser.Exported.Statement(ref state) }

cSharpType <TypeSyntax> -memoize
  = #parse{ this.cSharpParser.Exported.Type(ref state) }

code <CodeSpan> -lexical
  = "{" contents:braceContents "}" { new CodeSpan(contents, contentsStart, contentsEnd) }
  / "{" #error{ "PEG0011:" + Resources.PEG0011_ERROR_PARSER_UnterminatedCode }

braceContents
  = parts:("" chars:[^{}]+ / "{" braceContents "}")* { string.Concat(parts) }

equals    -lexical = "="
colon     -lexical = ":"
semicolon -lexical = ";"
slash     -lexical = "/"
and       -lexical = "&"
not       -lexical = "!"
question  -lexical = "?"
star      -lexical = "*"
plus      -lexical = "+"
lparen    -lexical = "("
rparen    -lexical = ")"
dot       -lexical = "."
lt        -lexical = "<"
gt        -lexical = ">"
comma     -lexical = ","
lbracket  -lexical = "["
rbracket  -lexical = "]"

identifier <Identifier> -memoize -lexical
  = name:(!digit (letter / digit / "_" / "$")+) { Identifier.From(name, nameStart, nameEnd) }

type <CodeSpan> -memoize -lexical
  = type:cSharpType { new CodeSpan(type.ToFullString(), typeStart, typeEnd, value: Regex.Replace(Regex.Replace(type.ToString(), @"(?<!,)\s+|\s+(?=[,\]])", ""), @",(?=\w)", ", ")) }

literal <Expression> -lexical
  = value:string flags:([si] "r" / "r" [si] / [si] / "r" / unrecognized:[a-z]i+ #error{ "PEG0026:" + string.Format(CultureInfo.CurrentCulture, Resources.PEG0026_ERROR_PARSER_StringFlagsUnrecognized, unrecognized) } / ) {
        LiteralExpression.From(valueStart, flagsEnd, value, ignoreCase: flags.Contains('i') ? true : flags.Contains('s') ? false : (bool?)null, fromResource: flags.Contains('r'))
    }

string -lexical
  = string:(doubleQuotedString / singleQuotedString) { @string }

doubleQuotedString
  = '"' chars:doubleQuotedCharacter* ('"' / #error{ "PEG0009:" + Resources.PEG0009_ERROR_PARSER_UnterminatedString }) { string.Concat(chars) }

doubleQuotedCharacter
  = simpleDoubleQuotedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleDoubleQuotedCharacter
  = !('"' / "\\" / eolChar) char:. { @char }

singleQuotedString
  = "'" chars:singleQuotedCharacter* ("'" / #error{ "PEG0009:" + Resources.PEG0009_ERROR_PARSER_UnterminatedString }) { string.Concat(chars) }

singleQuotedCharacter
  = simpleSingleQuotedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleSingleQuotedCharacter
  = !("'" / "\\" / eolChar) .

class <Expression> -lexical
  = lbracket inverted:"^"? parts:(classCharacterRange / classCharacter)* (rbracket / #error{ "PEG0010:" + Resources.PEG0010_ERROR_PARSER_UnterminatedClass }) flags:([si] / unrecognized:[a-z]i+ #error{ "PEG0026:" + string.Format(CultureInfo.CurrentCulture, Resources.PEG0026_ERROR_PARSER_CharacterClassFlagsUnrecognized, unrecognized) } / ) {
        new ClassExpression(
            parts,
            negated: inverted.SingleOrDefault() == "^",
            ignoreCase: flags == "i" ? true : flags == "s" ? false : (bool?)null)
    }

classCharacterRange <CharacterRange>
  = begin:bracketDelimitedCharacter "-" end:bracketDelimitedCharacter {
        CharacterRange.From(begin[0], end[0])
    }

classCharacter <CharacterRange>
  = char_:bracketDelimitedCharacter {
        CharacterRange.From(char_[0], char_[0])
    }

bracketDelimitedCharacter -memoize
  = simpleBracketDelimitedCharacter
  / simpleEscapeSequence
  / zeroEscapeSequence
  / hexEscapeSequence
  / unicodeEscapeSequence
  / eolEscapeSequence

simpleBracketDelimitedCharacter
  = !("]" / "\\" / eolChar) .

simpleEscapeSequence
  = "\\" !(digit / "x" / "u" / eolChar) char:. {
        @char
            .Replace("b", "\b")
            .Replace("f", "\f")
            .Replace("n", "\n")
            .Replace("r", "\r")
            .Replace("t", "\t")
            .Replace("v", "\v")
    }

zeroEscapeSequence
  = "\\0" !digit { "\0" }

hexEscapeSequence
  = "\\x" digits:(hexDigit hexDigit) {
        ((char)Convert.ToInt32(digits, 16)).ToString()
    }

unicodeEscapeSequence
  = "\\u" digits:(hexDigit hexDigit hexDigit hexDigit) {
        ((char)Convert.ToInt32(digits, 16)).ToString()
    }

eolEscapeSequence
  = "\\" eol:eol { eol }

digit
  = [0-9]

hexDigit
  = [0-9a-fA-F]

letter
  = lowerCaseLetter
  / upperCaseLetter

lowerCaseLetter
  = [a-z]

upperCaseLetter
  = [A-Z]

_ -memoize = (whitespace / eol / comment)*

comment -memoize
  = singleLineComment
  / multiLineComment

singleLineComment -memoize -lexical
  = "//" (!eolChar .)*

multiLineComment -lexical
  = "/*" (!"*/" .)* "*/"

eol -memoize
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028"
  / "\u2029"

eolChar
  = [\n\r\u2028\u2029]

whitespace -memoize -lexical
  = [ \t\v\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]

EOF
  = !.
  / unexpected:&. #error{ "PEG0008:" + string.Format(CultureInfo.CurrentCulture, Resources.PEG0008_ERROR_PARSER_UnexpectedEndOfInput, unexpected) }
