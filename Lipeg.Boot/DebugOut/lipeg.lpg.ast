grammar lipeg
{
    options
    {
        start = start;
        spacing = _;
    }
    rules
    {
        start <=
            grammar eof
            ;
        
        grammar <=
            ,(_ 'grammar') identifier ,(_ '{') ^(options / syntax / lexical)* ,(_ '}')
            ;
        
        options <=
            ,(_ 'options') ,(_ '{') ^option* ,(_ '}')
            ;
        
        option <=
            identifier ,(_ '=') option-value ,(_ ';')
            ;
        
        option-value <=
            qualified-identifier
            ;
        
        qualified-identifier <=
            identifier ^(,(_ '.') identifier)*
            ;
        
        syntax <=
            ,(_ 'rules') ,(_ '{') ^rules ,(_ ';')? ,(_ '}')
            ;
        
        lexical <=
            ,(_ 'lexical') ,(_ '{') ^rules ,(_ ';')? ,(_ '}')
            ;
        
        rules <=
            ^(rule ^(,(_ ';') rule)*)?
            ;
        
        rule <=
            identifier ,(_ '<=') ,(_ '/')? ^expression
            ;
        
        expression <=
            / choice
            / sequence
            ;
        
        choice <=
            sequence ^(,(_ '/') sequence)+
            ;
        
        sequence <=
            ^^prefix+
            ;
        
        prefix <=
            / (prefix.and <=
                (,(_ '&') ^suffix))
            / (prefix.not <=
                (,(_ '!') ^suffix))
            / (prefix.drop <=
                (,(_ ',') ^suffix))
            / (prefix.fuse <=
                (,(_ '~') ^suffix))
            / (prefix.lift <=
                (,(_ '^') ^suffix))
            / ^suffix
            ;
        
        suffix <=
            / (suffix.zero-or-one <=
                (^primary ,(_ '?')))
            / (suffix.zero-or-more <=
                (^primary ,(_ '*')))
            / (suffix.one-or-more <=
                (^primary ,(_ '+')))
            / ^primary
            ;
        
        primary <=
            / identifier
            / verbatim-string
            / string
            / character-class
            / any
            / epsilon
            / inline
            / (,(_ '(') ^expression ,(_ ')'))
            ;
        
        inline <=
            ,(_ '(') ^rule ,(_ ')')
            ;
        
        any <=
            ,(_ '.')
            ;
        
        epsilon <=
            / (_ 'epsilon')
            / (_ '\u{03B5}')
            ;
        
        eof <=
            !(_ .)
            ;
        
        prefix.and <=
            (,(_ '&') ^suffix)
            ;
        
        prefix.not <=
            (,(_ '!') ^suffix)
            ;
        
        prefix.drop <=
            (,(_ ',') ^suffix)
            ;
        
        prefix.fuse <=
            (,(_ '~') ^suffix)
            ;
        
        prefix.lift <=
            (,(_ '^') ^suffix)
            ;
        
        suffix.zero-or-one <=
            (^primary ,(_ '?'))
            ;
        
        suffix.zero-or-more <=
            (^primary ,(_ '*'))
            ;
        
        suffix.one-or-more <=
            (^primary ,(_ '+'))
            ;
    }
    lexical
    {
        identifier <=
            / ~(letter ^letter-or-digit* ^('-' ^letter-or-digit+)*)
            / ~'_'
            ;
        
        letter <=
            [a-zA-Z]
            ;
        
        letter-or-digit <=
            [a-zA-Z0-9]
            ;
        
        hex-digit <=
            [0-9a-fA-F]
            ;
        
        verbatim-string <=
            ~(,'\'' ^verbatim-character* ,'\'')
            ;
        
        verbatim-character <=
            !('\'' / '\\' / eol-char) .
            ;
        
        string <=
            ,'\'' ^^character* ,'\''
            ;
        
        character <=
            / string-verbatim
            / escape
            / unicode-escape
            / byte-escape
            ;
        
        string-verbatim <=
            ~(!('\'' / '\\' / eol-char) .)
            ;
        
        escape <=
            ~(,'\\' [0abefnrtv\-\]\\\'])
            ;
        
        unicode-escape <=
            ,('\\u{' _) unicode-number ,_ ^(unicode-number ,_)* ,'}'
            ;
        
        unicode-number <=
            ~(hex-digit ^hex-digit? ^hex-digit? ^hex-digit? ^hex-digit? ^hex-digit?)
            ;
        
        byte-escape <=
            ,('\\x{' _) byte-number ,_ ^(byte-number ,_)* ,'}'
            ;
        
        byte-number <=
            hex-digit ^hex-digit?
            ;
        
        character-class <=
            ,'[' not ^^class-part* ,']'
            ;
        
        not <=
            ^'^'?
            ;
        
        class-part <=
            / range
            / ^class-char
            ;
        
        range <=
            ^class-char ,'-' ^class-char
            ;
        
        class-char <=
            / class-verbatim
            / escape
            / unicode-escape
            / byte-escape
            ;
        
        class-verbatim <=
            ~(!(']' / '\\' / eol-char) .)
            ;
        
        _ <=
            (whitespace / newline / comment)*
            ;
        
        comment <=
            / single-line-comment
            / multi-line-comment
            ;
        
        single-line-comment <=
            '//' (!eol-char .)*
            ;
        
        multi-line-comment <=
            '/*' (!'*/' .)* '*/'
            ;
        
        newline <=
            / '\n'
            / '\r\n'
            / '\r'
            / '\u{2028}'
            / '\u{2029}'
            ;
        
        eol-char <=
            [\n\r\u{2028}\u{2029}]
            ;
        
        whitespace <=
            [ \t\v\f\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]
            ;
    }
}
