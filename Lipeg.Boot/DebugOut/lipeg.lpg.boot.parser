(start
    (&& grammar eof))

(grammar
    (&& (, ['grammar']) [identifier] (, ['{']) (^ (* (|| options syntax lexical))) (, ['}'])))

(options
    (&& (, ['options']) (, ['{']) (^ (* option)) (, ['}'])))

(option
    [(&& [identifier] (, ['=']) option-value (, [';']))])

(option-value
    qualified-identifier)

(qualified-identifier
    [(&& [identifier] (^ (* (&& (, ['.']) [identifier]))))])

(syntax
    (&& (, ['syntax']) (, ['{']) (^ rules) (, [(? [';'])]) (, ['}'])))

(lexical
    (&& (, ['lexical']) (, ['{']) (^ rules) (, [(? [';'])]) (, ['}'])))

(rules
    (^ (? (&& rule (^ (* (&& (, [';']) rule)))))))

(rule
    [(&& [identifier] (, ['<=']) (, [(? ['/'])]) (^ expression))])

(expression
    (|| choice
        sequence))

(choice
    (&& sequence (^ (+ (&& (, ['/']) sequence)))))

(sequence
    (^ (+ (^ prefix))))

(prefix
    (|| prefix.and
        prefix.not
        prefix.drop
        prefix.fuse
        prefix.lift
        (^ suffix)))

(suffix
    (|| suffix.zero-or-one
        suffix.zero-or-more
        suffix.one-or-more
        (^ primary)))

(primary
    (|| [identifier]
        [verbatim-string]
        [string]
        [character-class]
        any
        epsilon
        inline
        (&& (, ['(']) (^ expression) (, [')']))))

(inline
    (&& (, ['(']) (^ rule) (, [')'])))

(any
    (, ['.']))

(epsilon
    [(|| ['epsilon'] ['\u{03B5}'])])

(eof
    [(! [.])])

(prefix.and
    (&& (, ['&']) (^ suffix)))

(prefix.not
    (&& (, ['!']) (^ suffix)))

(prefix.drop
    (&& (, [',']) (^ suffix)))

(prefix.fuse
    (&& (, ['~']) (^ suffix)))

(prefix.lift
    (&& (, ['^']) (^ suffix)))

(suffix.zero-or-one
    (&& (^ primary) (, ['?'])))

(suffix.zero-or-more
    (&& (^ primary) (, ['*'])))

(suffix.one-or-more
    (&& (^ primary) (, ['+'])))

(identifier
    (|| (~ (&& letter (^ (* letter-or-digit)) (^ (* (&& '-' (^ (+ letter-or-digit)))))))
        (~ '_')))

(letter
    (|| 'a-z'
        'A-Z'))

(letter-or-digit
    (|| 'a-z'
        'A-Z'
        '0-9'))

(hex-digit
    (|| '0-9'
        'a-f'
        'A-F'))

(verbatim-string
    (~ (&& (, '\'') (^ (* verbatim-character)) (, '\''))))

(verbatim-character
    (&& (! (|| '\'' '\\' eol-char)) .))

(string
    (&& (, '\'') (^ (* (^ character))) (, '\'')))

(character
    (|| string-verbatim
        escape
        unicode-escape
        byte-escape))

(string-verbatim
    (~ (&& (! (|| '\'' '\\' eol-char)) .)))

(escape
    (~ (&& (, '\\') (|| '0' 'a' 'b' 'e' 'f' 'n' 'r' 't' 'v' '-' ']' '\\' '\''))))

(unicode-escape
    (&& (, (&& '\\u{' _)) unicode-number (, _) (^ (* (&& unicode-number (, _)))) (, '}')))

(unicode-number
    (~ (&& hex-digit (^ (? hex-digit)) (^ (? hex-digit)) (^ (? hex-digit)) (^ (? hex-digit)) (^ (? hex-digit)))))

(byte-escape
    (&& (, (&& '\\x{' _)) byte-number (, _) (^ (* (&& byte-number (, _)))) (, '}')))

(byte-number
    (&& hex-digit (^ (? hex-digit))))

(character-class
    (&& (, '[') not (^ (* (^ class-part))) (, ']')))

(not
    (^ (? '^')))

(class-part
    (|| range
        (^ class-char)))

(range
    (&& (^ class-char) (, '-') (^ class-char)))

(class-char
    (|| class-verbatim
        escape
        unicode-escape
        byte-escape))

(class-verbatim
    (~ (&& (! (|| ']' '\\' eol-char)) .)))

(_
    (* (|| whitespace newline comment)))

(comment
    (|| single-line-comment
        multi-line-comment))

(single-line-comment
    (&& '//' (* (&& (! eol-char) .))))

(multi-line-comment
    (&& '/*' (* (&& (! '*/') .)) '*/'))

(newline
    (|| '\n'
        '\r\n'
        '\r'
        '\u{2028}'
        '\u{2029}'))

(eol-char
    (|| '\n'
        '\r'
        '\u{2028}'
        '\u{2029}'))

(whitespace
    (|| ' '
        '\t'
        '\v'
        '\f'
        '\u{00A0}'
        '\u{FEFF}'
        '\u{1680}'
        '\u{180E}'
        '\u{2000}-\u{200A}'
        '\u{202F}'
        '\u{205F}'
        '\u{3000}'))
