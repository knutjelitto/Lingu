grammar lipeg
{
    opts
    {
        start = start;
        spacing = _;
    }
    rules
    {
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        start <=
            grammar eof
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        grammar <=
            ,(_ 'grammar') ,(_ '{') ^(options / syntax / lexical)* ,(_ '}')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        options <=
            ,(_ 'options') ,(_ '{') ^option* ,(_ '}')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        option <=
            identifier ,(_ '=') option-value ,(_ ';')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        option-value <=
            qualified-identifier
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        qualified-identifier <=
            identifier ^(,(_ '.') identifier)*
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        syntax <=
            ,(_ 'rules') ,(_ '{') rules ,(_ ';')? ,(_ '}')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        lexical <=
            ,(_ 'lexical') ,(_ '{') rules ,(_ ';')? ,(_ '}')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        rules <=
            ^(rule ^(,(_ ';') rule)*)?
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        rule <=
            identifier ,(_ '<=') ,(_ '/')? expression
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        expression <=
            choice
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        choice <=
            sequence ^(,(_ '/') sequence)*
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        sequence <=
            ^aliased+
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        aliased <=
            / prefix (_ ':') identifier
            / prefix
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        prefix <=
            / prefix.and
            / prefix.not
            / prefix.drop
            / prefix.fuse
            / prefix.lift
            / suffix
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        suffix <=
            / suffix.zero-or-one
            / suffix.zero-or-more
            / suffix.one-or-more
            / primary
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        primary <=
            / identifier
            / string
            / character-class
            / any
            / epsilon
            / inline
            / ,(_ '(') expression ,(_ ')')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        inline <=
            ,(_ '(') ^rule ,(_ ')')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        any <=
            ,(_ '.')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        epsilon <=
            / (_ 'epsilon')
            / (_ '\u{03B5}')
            ;
        
        // is used
        // is reachable
        // is nullable
        // ! is lexical
        // is syntax
        eof <=
            !(_ .)
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        prefix.and <=
            ,(_ '&') suffix
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        prefix.not <=
            ,(_ '!') suffix
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        prefix.drop <=
            ,(_ ',') suffix
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        prefix.fuse <=
            ,(_ '~') suffix
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        prefix.lift <=
            ,(_ '^') suffix
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        suffix.zero-or-one <=
            primary ,(_ '?')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        suffix.zero-or-more <=
            primary ,(_ '*')
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // ! is lexical
        // is syntax
        suffix.one-or-more <=
            primary ,(_ '+')
            ;
    }
    lexical
    {
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        identifier <=
            letter letter-or-digit* ('-' letter-or-digit+)*
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        letter <=
            [a-zA-Z]
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        letter-or-digit <=
            [a-zA-Z0-9]
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        hex-digit <=
            [0-9a-fA-F]
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        string <=
            ,'\'' character* ,'\''
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        character <=
            / !('\'' / '\\' / eol-char) .
            / any-escape
            / unicode-escape
            / byte-escape
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        any-escape <=
            ,'\\' [0abefnrtv\-\]\\]
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        unicode-escape <=
            ,('\\u{' _) unicode-number ,_ ^(unicode-number ,_)* ,'}'
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        unicode-number <=
            hex-digit ^hex-digit? ^hex-digit? ^hex-digit? ^hex-digit? ^hex-digit?
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        byte-escape <=
            ,('\\x{' _) byte-number ,_ ^(byte-number ,_)* ,'}'
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        byte-number <=
            hex-digit ^hex-digit?
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        character-class <=
            ,'[' '^'? class-part* ,']'
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        class-part <=
            / class-range
            / class-char
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        class-range <=
            class-char ,'-' class-char
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        class-char <=
            / !(']' / '\\' / eol-char) .
            / any-escape
            / unicode-escape
            / byte-escape
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        _ <=
            (whitespace / newline / comment)*
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        comment <=
            / single-line-comment
            / multi-line-comment
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        single-line-comment <=
            '//' (!eol-char .)*
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        multi-line-comment <=
            '/*' (!'*/' .)* '*/'
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        newline <=
            / '\n'
            / '\r\n'
            / '\r'
            / '\u{2028}'
            / '\u{2029}'
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        eol-char <=
            [\n\r\u{2028}\u{2029}]
            ;
        
        // is used
        // is reachable
        // ! is nullable
        // is lexical
        // ! is syntax
        whitespace <=
            [ \t\v\f\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]
            ;
    }
}
