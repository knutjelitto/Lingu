grammar lipeg
{
    options
    {
        start = start;
        spacing = _;
    }
    rules
    {
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        start <=
            grammar eof
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        grammar <=
            ,(_ 'grammar') ,(_ '{') ^(options / syntax / lexical)* ,(_ '}')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        options <=
            ,(_ 'options') ,(_ '{') ^option* ,(_ '}')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        option <=
            identifier ,(_ '=') option-value ,(_ ';')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        option-value <=
            qualified-identifier
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        qualified-identifier <=
            identifier ^(,(_ '.') identifier)*
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        syntax <=
            ,(_ 'rules') ,(_ '{') rules ,(_ ';')? ,(_ '}')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        lexical <=
            ,(_ 'lexical') ,(_ '{') rules ,(_ ';')? ,(_ '}')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        rules <=
            ^(rule ^(,(_ ';') rule)*)?
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        rule <=
            identifier ,(_ '<=') ,(_ '/')? expression
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        expression <=
            choice
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        choice <=
            sequence ^(,(_ '/') sequence)*
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        sequence <=
            ^aliased+
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        aliased <=
            / prefix (_ ':') identifier
            / prefix
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        prefix <=
            / prefix.and
            / prefix.not
            / prefix.drop
            / prefix.fuse
            / prefix.lift
            / suffix
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        suffix <=
            / suffix.zero-or-one
            / suffix.zero-or-more
            / suffix.one-or-more
            / primary
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        primary <=
            / identifier
            / string
            / character-class
            / any
            / epsilon
            / inline
            / ,(_ '(') expression ,(_ ')')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        inline <=
            ,(_ '(') ^rule ,(_ ')')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        any <=
            ,(_ '.')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        epsilon <=
            / (_ 'epsilon')
            / (_ '\u{03B5}')
            ;
        
        // used somewhere
        // reachable from start
        // zeroable
        // ! behave lexical
        eof <=
            !(_ .)
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        prefix.and <=
            ,(_ '&') suffix
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        prefix.not <=
            ,(_ '!') suffix
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        prefix.drop <=
            ,(_ ',') suffix
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        prefix.fuse <=
            ,(_ '~') suffix
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        prefix.lift <=
            ,(_ '^') suffix
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        suffix.zero-or-one <=
            primary ,(_ '?')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        suffix.zero-or-more <=
            primary ,(_ '*')
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // ! behave lexical
        suffix.one-or-more <=
            primary ,(_ '+')
            ;
    }
    lexical
    {
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        identifier <=
            letter letter-or-digit* ('-' letter-or-digit+)*
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        letter <=
            [a-zA-Z]
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        letter-or-digit <=
            [a-zA-Z0-9]
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        hex-digit <=
            [0-9a-fA-F]
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        string <=
            ,'\'' character* ,'\''
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        character <=
            / !('\'' / '\\' / eol-char) .
            / escape
            / unicode
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        escape <=
            ,'\\' [0abefnrtv\-\]\\]
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        unicode <=
            ,'\\u{' hex-digit ^hex-digit? ^hex-digit? ^hex-digit? ^hex-digit? ^hex-digit? ,'}'
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        character-class <=
            ,'[' '^'? class-part* ,']'
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        class-part <=
            / class-range
            / class-char
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        class-range <=
            class-char ,'-' class-char
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        class-char <=
            / !(']' / '\\' / eol-char) .
            / escape
            / unicode
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        _ <=
            (whitespace / newline / comment)*
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        comment <=
            / single-line-comment
            / multi-line-comment
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        single-line-comment <=
            '//' (!eol-char .)*
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        multi-line-comment <=
            '/*' (!'*/' .)* '*/'
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        newline <=
            / '\n'
            / '\r\n'
            / '\r'
            / '\u{2028}'
            / '\u{2029}'
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        eol-char <=
            [\n\r\u{2028}\u{2029}]
            ;
        
        // used somewhere
        // reachable from start
        // ! zeroable
        // behave lexical
        whitespace <=
            [ \t\v\f\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]
            ;
    }
}
