grammar Lingu
{
    options
    {
        Start = file;
        Spacing = spacing;
    }

    rules
    {
        file
            : angrammar
            ;

        angrammar
            : ,'grammar' identifier ,'{' grammar_item* ,'}'
            ;

        grammar_item
            : ^grammar_options
            | ^grammar_rules
            | ^grammar_terminals
            ;

        /* OPTIONS */
        grammar_options
            : ,'options' ,'{' option* ,'}'
            ;

        option
            : 'Start' ,'=' identifier ,';'
            | 'Spacing' ,'=' identifier ,';'
            ;

        grammar_rules
            : ,'rules' ,'{' rule* ,'}'
            ;

        rule                        
            : identifier ,(':'|'->') rule_expression ,';'
            ;

        rule_expression
            : rule_alternative (,'|' rule_alternative)*
            ;

        rule_alternative
            : ^rule_sequence
            ;

        rule_sequence
            : rule_repetition*
            ;

        rule_repetition
            : ^rule_option
            | ^rule_star
            | ^rule_plus
            | ^rule_tree_action
            ;

        rule_option
            : rule_tree_action ,'?'
            ;

        rule_star
            : rule_tree_action ,'*'
            | rule_tree_action ,'*:' terminal_element
            ;

        rule_plus
            : rule_tree_action ,'+'
            | rule_tree_action ,'+:' terminal_element
            ;

        rule_tree_action
            : ^rule_drop
            | ^rule_promote
            | ^rule_primary
            ;

        rule_drop
            : ,',' rule_primary
            ;

        rule_promote
            : ,'^' rule_primary
            ;

        rule_primary
            : ^sub_rule
            | ,'(' ^rule_expression ,')'
            | ^rule_atom
            ;

        sub_rule
            : ,'{' identifier ,(':'|'->') rule_expression ,'}'
            ;

        rule_atom
            : ^reference
            | ^text
            ;

        reference
            -> ^identifier
            ;

        grammar_terminals
            : ,'terminals' ,'{' terminal_rule* ,'}'
            ;

        terminal_rule
            : identifier ,(':'|'->') terminal_expression ,';'
            ;

        terminal_expression
            : terminal_alternative (,'|' terminal_alternative)*
            ;

        terminal_alternative
            : ^terminal_sequence
            | ^terminal_diff
            ;

        terminal_diff
            : terminal_sequence ,'-' terminal_sequence
            ;

        terminal_sequence
            : terminal_repetition*
            ;

        terminal_repetition     
            : ^terminal_option
            | ^terminal_star
            | ^terminal_plus
            | ^terminal_range_loop
            | ^terminal_element
            ;

        terminal_option
            : terminal_element '?'
            ;

        terminal_star
            : terminal_element '*'
            ;

        terminal_plus
            : terminal_element '+'
            ;

        terminal_range_loop
            : terminal_element range
            ;

        range
            : ,'{' number (,',' number)? ,'}'
            ;

        terminal_element
            : ^terminal_atom
            | ^terminal_not
            | ,'(' ^terminal_expression ,')'
            ;

        terminal_not
            : ,'~' terminal_atom
            ;

        terminal_atom
            : ^any
            | ^text
            | ^characterRange
            | ^ucCodepoint
            | ^ucBlock
            | ^ucCategory
            | ^reference
            ;

        characterRange
            : character ,'..' character
            ;

        character
            : ^ucCodepoint
            | ^text
            ;
    }

    terminals
    {
        newline
            : '\n'          // LF (Unix)
            | '\r' '\n'     // CR LF (Windows)
			| '\r'			// CR (MacOs)
			| U+0085        // NL Next line character
			| U+2028        // LS Line separator character
			| U+2029        // PS Paragraph separator character
            ;

        newlineChar
            : '\n'          // LF
            | '\r'          // CR
			| U+0085        // NL Next line character
			| U+2028        // LS Line separator character
			| U+2029        // PS Paragraph separator character
            ;

        whitespace
            : ' '
            | U+0009
            | U+000B
            | U+000C
            ;

        lineComment
            : '//' (. - newlineChar)*
            ;

        blockComment
            : '/*'  ((. - '*') | '*' (. - '/'))* '*/'
            ;

        spacing
            : (newline | whitespace | lineComment | blockComment)*
            ;


        identifierStart
            : ('a' .. 'z' | 'A' .. 'Z' |  '_')
            ;

		identifierContinue
			: identifierStart | digit
			;

        identifier
            : identifierStart identifierContinue*
            ;

        digit
            : '0' .. '9'
            ;

        nonzeroDigit
            : '1' .. '9'
            ;

        zero
            : digit - nonzeroDigit
            ;

        number
            : zero
            | nonzeroDigit digit*
            ;

        hexDigit
            : '0' .. '9'
            | 'a' .. 'f'
            | 'A' .. 'F'
            ;

        escapes       
            : '\\\\'                        // Backslash
            | '\\\''                        // 
            | '\\0'                         // Unicode character 0
            | '\\a'                         // Alert (character 7)
            | '\\b'                         // Backspace (character 8)
            | '\\f'                         // Form feed (character 12)
            | '\\n'                         // New line (character 10)
            | '\\r'                         // Carriage return (character 13)
            | '\\t'                         // Horizontal tab (character 9)
            | '\\v'                         // Vertical quote (character 11)
            | '\\u{' hexDigit{1,6} '}'      // Unicode code point
            ;

        any : '.';

        text
            : '\'' ( (. - ('\'' | '\\')) | escapes )+ '\''
            ;

        ucNameStart
            : 'a' .. 'z' | 'A' .. 'Z';

        ucNameInner
            : ucNameStart | '0' .. '9'  | '_' | '-' | ' ';

        ucNameEnd
            : ucNameStart | '0' .. '9';

        ucName
            : ucNameStart ucNameEnd*
            | ucNameStart ucNameInner+ ucNameEnd
            ;

        ucBlock
            : '\\ub' '{' ucName '}';

        ucCategory
            : '\\uc' '{' ucName '}';

        ucCodepoint
            : '\\u{' hexDigit{1,6} '}'
            | ('u'|'U')'+' hexDigit{1,6}
            ;
    }
}
