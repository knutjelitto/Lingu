grammar Expression
{
    options
    {
        Start = expression;
        Whitespace = spacing;
        Keywords = identifier;
    }
    terminals
    {
        newline
            : '\n'          // LF (Unix)
            | '\r' '\n'     // CR LF (Windows)
			| '\r'			// CR (MacOs)
			| U+0085        // NL Next line character
			| U+2028        // LS Line separator character
			| U+2029        // PS Paragraph separator character
            ;

        newlineChar
            : '\n'          // LF
            | '\r'          // CR
			| U+0085        // NL Next line character
			| U+2028        // LS Line separator character
			| U+2029        // PS Paragraph separator character
            ;

        whitespace
            : ' '
            | U+0009
            | U+000B
            | U+000C
            ;

        lineComment
            : '//' (. - newlineChar)*
            ;

        blockComment
            : '/*'  ((. - '*') | '*' (. - '/'))* '*/'
            ;

        spacing
            : (newline | whitespace | lineComment | blockComment)*
            ;

        identifierStart
            : ('a' .. 'z' | 'A' .. 'Z' |  '_')
            ;

		identifierContinue
			: identifierStart | digit
			;

        identifier
            : identifierStart identifierContinue*
            ;

        digit
            : '0' .. '9'
            ;

        nonzeroDigit
            : '1' .. '9'
            ;

        zero
            : digit - nonzeroDigit
            ;

        number
            : zero
            | nonzeroDigit digit*
            ;
    }
    rules
    {
	    expression
            : ^{shlOp: prefix ,'<<' prefix}
			| ^{shrOp: prefix ,'>>' prefix}
            | ^{addOp: prefix ,'+'  prefix}
            | ^{subOp: prefix ,'-'  prefix}
            | ^{mulOp: prefix ,'*'  prefix}
            | ^{divOp: prefix ,'/'  prefix}
            | ^{remOp: prefix ,'%'  prefix}
            | ^{modOp: prefix ,'%%' prefix}
			| ^prefix
            ;

        prefix
            : ^{negOp: ,'-' prefix}
            | ^primary
            ;

        primary
            : ^path
            | ^number
            | ,'(' ^expression ,')'
            ;

        path
            : pathPart (,'.' pathPart)*
            ;

        pathPart
            : ^identifier
            | ^identifierWithArguments
            ;

        identifierWithArguments
            : identifier ,'<' typeArguments ,'>'
            ;

        typeArguments
            : typeArgument (',' typeArgument)*
            | 
            ;

        typeArgument
            : ^identifier
            ;
    }
}
