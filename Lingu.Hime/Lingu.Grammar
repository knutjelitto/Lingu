grammar Lingu
{
    options
    {
        Axiom = "file";
        Separator = "SEPARATOR";
    }

    terminals
    {
        fragment NEW_LINE
            -> U+000D           // CR
            |  U+000A           // LF
            |  U+000D U+000A    // CR LF
			|  U+0085           // NL Next line character
			|  U+2028           // LS Line separator character
			|  U+2029           // PS Paragraph separator character
            ;

        fragment WHITE_SPACE    -> uc{Zs} | U+0009 | U+000B | U+000C ;

        fragment COMMENT_LINE
            -> '//' (. - NEW_LINE)*
            ;

        fragment COMMENT_BLOCK
            -> '/*' (.* - (.* '*/' .*)) '*/'
            ;

        BLOCK_COMMENT
            -> '/*' (.* - (.* '*/' .*)) '*/'    
            ;

        SEPARATOR               -> (NEW_LINE | WHITE_SPACE | COMMENT_LINE | BLOCK_COMMENT)+;

        fragment NAME_FIRST     -> [_a-zA-Z];
        fragment LETTER         -> [a-zA-Z];
        fragment DIGIT          -> [0-9];
        fragment UNDERSCORE     -> [_];
        NAME                    -> UNDERSCORE? LETTER (LETTER | DIGIT | UNDERSCORE)* ;

        INTEGER                 -> '0' | [1-9] [0-9]*;
        fragment ESCAPEES       -> '\\\\'                       // Backslash
                                |  '\\0'                        // Unicode character 0
                                |  '\\a'                        // Alert (character 7)
                                |  '\\b'                        // Backspace (character 8)
                                |  '\\f'                        // Form feed (character 12)
                                |  '\\n'                        // New line (character 10)
                                |  '\\r'                        // Carriage return (character 13)
                                |  '\\t'                        // Horizontal tab (character 9)
                                |  '\\v'                        // Vertical quote (character 11)
                                |  '\\u{' [a-fA-F0-9]{1,6} '}'  // Unicode code point
                                ;

        LITERAL_ANY             -> '.';
        LITERAL_TEXT            -> '\'' ( [^\\'] | '\\\'' | ESCAPEES )+ '\'';

        UNICODE_BLOCK           -> '\\ub' '{' ([_a-zA-Z0-9] | '-')+ '}' ;
        UNICODE_CATEGORY        -> '\\uc' '{' ([_a-zA-Z0-9] | '-')+ '}' ;
        UNICODE_CODEPOINT       -> '\\u{' [a-fA-F0-9]{1,6} '}'
                                |  [uU]'+' [a-fA-F0-9]{1,6}
                                ;
    }
    rules
    {
        file
            -> cf_grammar
            ;

        cf_grammar
            -> 'grammar'! NAME '{'! grammar_item+ '}'!
            ;

        grammar_item
            -> grammar_options^
            |  grammar_terminals^
            |  grammar_rules^
            ;

        /* OPTIONS */
        grammar_options
            -> 'options'! '{'! option* '}'!
            ;

        option
            -> NAME '='! NAME ';'!
            ;

        /* TERMINALS *
            /* terminals */
            grammar_terminals
                -> 'terminals'! '{'! terminal_rule* '}'!
                ;

            terminal_rule
                -> NAME (':'|'->')! terminal_expression ';'!
                ;

            terminal_expression
                -> terminal_difference ('|'! terminal_difference)*
                ;

            terminal_difference
                -> terminal_sequence ('-'! terminal_sequence)?
                ;

            terminal_sequence
                -> terminal_repetition+
                ;

            terminal_repetition     
                -> terminal_element terminal_cardinalilty?
                ;

            terminal_element
                -> terminal_atom^
                |  terminal_not^
                | '('! terminal_expression^ ')'! 
                ;

            terminal_not
                -> '~'! terminal_element
                ;

            terminal_atom
                -> LITERAL_ANY^
                |  text^
                |  range^
                |  UNICODE_CODEPOINT^
                |  UNICODE_BLOCK^
                |  UNICODE_CATEGORY^
                |  reference^
                ;

            range
                -> character '..'! character
                ;

            character
                -> UNICODE_CODEPOINT
                |  text
                ;

            text
                -> LITERAL_TEXT
                ;

            terminal_cardinalilty
                -> '?'^
                |  '*'^
                |  '+'^
                |  "range"^ '{'! INTEGER (','! INTEGER)? '}'!
                ;

        /* RULES */
            grammar_rules
                -> 'rules'! '{'! rule* '}'!
                ;

            rule                        
                -> NAME promoteAll (':'|'->')! rule_expression ';'!
                ;

            promoteAll
                -> '^'?
                | // epsilon
                ;

            rule_expression
                -> rule_alternative ('|'! rule_alternative)*
                ;

            rule_alternative
                -> rule_sequence
                | // epsilon
                ;

            rule_sequence
                -> rule_repetition+
                ;

            rule_repetition
                -> rule_drop_action ('?' | '*' | '+')?
                ;

            rule_drop_action
                -> ','? rule_element
                ;

            rule_element
                -> rule_sub^
                |  '('! rule_expression^ ')'!
                |  rule_atom^
                ;

            rule_sub 
                -> '{'! NAME (':'|'->')! rule_expression '}'!
                ;

            rule_atom
                -> reference^
                |  text^
                ;

            reference
                -> NAME
                ;
    }
}
