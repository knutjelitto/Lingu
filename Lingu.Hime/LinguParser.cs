/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.4.0.0
 */
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace Lingu.Bootstrap.Hime
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	public class LinguParser : LRkParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly LRkAutomaton commonAutomaton = LRkAutomaton.Find(typeof(LinguParser), "LinguParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable file
			/// </summary>
			public const int VariableFile = 0x0012;
			/// <summary>
			/// The unique identifier for variable cf_grammar
			/// </summary>
			public const int VariableCfGrammar = 0x0013;
			/// <summary>
			/// The unique identifier for variable grammar_item
			/// </summary>
			public const int VariableGrammarItem = 0x0014;
			/// <summary>
			/// The unique identifier for variable grammar_options
			/// </summary>
			public const int VariableGrammarOptions = 0x0015;
			/// <summary>
			/// The unique identifier for variable option
			/// </summary>
			public const int VariableOption = 0x0016;
			/// <summary>
			/// The unique identifier for variable grammar_terminals
			/// </summary>
			public const int VariableGrammarTerminals = 0x0017;
			/// <summary>
			/// The unique identifier for variable terminal_rule
			/// </summary>
			public const int VariableTerminalRule = 0x0018;
			/// <summary>
			/// The unique identifier for variable terminal_expression
			/// </summary>
			public const int VariableTerminalExpression = 0x0019;
			/// <summary>
			/// The unique identifier for variable terminal_difference
			/// </summary>
			public const int VariableTerminalDifference = 0x001A;
			/// <summary>
			/// The unique identifier for variable terminal_sequence
			/// </summary>
			public const int VariableTerminalSequence = 0x001B;
			/// <summary>
			/// The unique identifier for variable terminal_repetition
			/// </summary>
			public const int VariableTerminalRepetition = 0x001C;
			/// <summary>
			/// The unique identifier for variable terminal_element
			/// </summary>
			public const int VariableTerminalElement = 0x001D;
			/// <summary>
			/// The unique identifier for variable terminal_not
			/// </summary>
			public const int VariableTerminalNot = 0x001E;
			/// <summary>
			/// The unique identifier for variable terminal_atom
			/// </summary>
			public const int VariableTerminalAtom = 0x001F;
			/// <summary>
			/// The unique identifier for variable range
			/// </summary>
			public const int VariableRange = 0x0020;
			/// <summary>
			/// The unique identifier for variable character
			/// </summary>
			public const int VariableCharacter = 0x0021;
			/// <summary>
			/// The unique identifier for variable text
			/// </summary>
			public const int VariableText = 0x0022;
			/// <summary>
			/// The unique identifier for variable terminal_cardinalilty
			/// </summary>
			public const int VariableTerminalCardinalilty = 0x0023;
			/// <summary>
			/// The unique identifier for variable grammar_rules
			/// </summary>
			public const int VariableGrammarRules = 0x0024;
			/// <summary>
			/// The unique identifier for variable rule
			/// </summary>
			public const int VariableRule = 0x0025;
			/// <summary>
			/// The unique identifier for variable rule_expression
			/// </summary>
			public const int VariableRuleExpression = 0x0026;
			/// <summary>
			/// The unique identifier for variable rule_alternative
			/// </summary>
			public const int VariableRuleAlternative = 0x0027;
			/// <summary>
			/// The unique identifier for variable rule_sequence
			/// </summary>
			public const int VariableRuleSequence = 0x0028;
			/// <summary>
			/// The unique identifier for variable rule_repetition
			/// </summary>
			public const int VariableRuleRepetition = 0x0029;
			/// <summary>
			/// The unique identifier for variable rule_tree_action
			/// </summary>
			public const int VariableRuleTreeAction = 0x002A;
			/// <summary>
			/// The unique identifier for variable rule_element
			/// </summary>
			public const int VariableRuleElement = 0x002B;
			/// <summary>
			/// The unique identifier for variable rule_sub
			/// </summary>
			public const int VariableRuleSub = 0x002C;
			/// <summary>
			/// The unique identifier for variable rule_atom
			/// </summary>
			public const int VariableRuleAtom = 0x002D;
			/// <summary>
			/// The unique identifier for variable reference
			/// </summary>
			public const int VariableReference = 0x002E;
			/// <summary>
			/// The unique identifier for virtual range
			/// </summary>
			public const int VirtualRange = 0x0047;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x0012, "file"), 
			new Symbol(0x0013, "cf_grammar"), 
			new Symbol(0x0014, "grammar_item"), 
			new Symbol(0x0015, "grammar_options"), 
			new Symbol(0x0016, "option"), 
			new Symbol(0x0017, "grammar_terminals"), 
			new Symbol(0x0018, "terminal_rule"), 
			new Symbol(0x0019, "terminal_expression"), 
			new Symbol(0x001A, "terminal_difference"), 
			new Symbol(0x001B, "terminal_sequence"), 
			new Symbol(0x001C, "terminal_repetition"), 
			new Symbol(0x001D, "terminal_element"), 
			new Symbol(0x001E, "terminal_not"), 
			new Symbol(0x001F, "terminal_atom"), 
			new Symbol(0x0020, "range"), 
			new Symbol(0x0021, "character"), 
			new Symbol(0x0022, "text"), 
			new Symbol(0x0023, "terminal_cardinalilty"), 
			new Symbol(0x0024, "grammar_rules"), 
			new Symbol(0x0025, "rule"), 
			new Symbol(0x0026, "rule_expression"), 
			new Symbol(0x0027, "rule_alternative"), 
			new Symbol(0x0028, "rule_sequence"), 
			new Symbol(0x0029, "rule_repetition"), 
			new Symbol(0x002A, "rule_tree_action"), 
			new Symbol(0x002B, "rule_element"), 
			new Symbol(0x002C, "rule_sub"), 
			new Symbol(0x002D, "rule_atom"), 
			new Symbol(0x002E, "reference"), 
			new Symbol(0x0031, "__V49"), 
			new Symbol(0x0034, "__V52"), 
			new Symbol(0x0038, "__V56"), 
			new Symbol(0x003C, "__V60"), 
			new Symbol(0x003E, "__V62"), 
			new Symbol(0x003F, "__V63"), 
			new Symbol(0x004A, "__V74"), 
			new Symbol(0x004B, "__V75"), 
			new Symbol(0x004C, "__V76"), 
			new Symbol(0x004E, "__VAxiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
			new Symbol(0x0047, "range") };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public LinguParser(LinguLexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }

		/// <summary>
		/// Visitor interface
		/// </summary>
		public class Visitor
		{
			public virtual void OnTerminalBlockComment(ASTNode node) {}
			public virtual void OnTerminalSeparator(ASTNode node) {}
			public virtual void OnTerminalName(ASTNode node) {}
			public virtual void OnTerminalInteger(ASTNode node) {}
			public virtual void OnTerminalLiteralAny(ASTNode node) {}
			public virtual void OnTerminalLiteralText(ASTNode node) {}
			public virtual void OnTerminalUnicodeBlock(ASTNode node) {}
			public virtual void OnTerminalUnicodeCategory(ASTNode node) {}
			public virtual void OnTerminalUnicodeCodepoint(ASTNode node) {}
			public virtual void OnVariableFile(ASTNode node) {}
			public virtual void OnVariableCfGrammar(ASTNode node) {}
			public virtual void OnVariableGrammarItem(ASTNode node) {}
			public virtual void OnVariableGrammarOptions(ASTNode node) {}
			public virtual void OnVariableOption(ASTNode node) {}
			public virtual void OnVariableGrammarTerminals(ASTNode node) {}
			public virtual void OnVariableTerminalRule(ASTNode node) {}
			public virtual void OnVariableTerminalExpression(ASTNode node) {}
			public virtual void OnVariableTerminalDifference(ASTNode node) {}
			public virtual void OnVariableTerminalSequence(ASTNode node) {}
			public virtual void OnVariableTerminalRepetition(ASTNode node) {}
			public virtual void OnVariableTerminalElement(ASTNode node) {}
			public virtual void OnVariableTerminalNot(ASTNode node) {}
			public virtual void OnVariableTerminalAtom(ASTNode node) {}
			public virtual void OnVariableRange(ASTNode node) {}
			public virtual void OnVariableCharacter(ASTNode node) {}
			public virtual void OnVariableText(ASTNode node) {}
			public virtual void OnVariableTerminalCardinalilty(ASTNode node) {}
			public virtual void OnVariableGrammarRules(ASTNode node) {}
			public virtual void OnVariableRule(ASTNode node) {}
			public virtual void OnVariableRuleExpression(ASTNode node) {}
			public virtual void OnVariableRuleAlternative(ASTNode node) {}
			public virtual void OnVariableRuleSequence(ASTNode node) {}
			public virtual void OnVariableRuleRepetition(ASTNode node) {}
			public virtual void OnVariableRuleTreeAction(ASTNode node) {}
			public virtual void OnVariableRuleElement(ASTNode node) {}
			public virtual void OnVariableRuleSub(ASTNode node) {}
			public virtual void OnVariableRuleAtom(ASTNode node) {}
			public virtual void OnVariableReference(ASTNode node) {}
			public virtual void OnVirtualRange(ASTNode node) {}
		}

		/// <summary>
		/// Walk the AST using a visitor
		/// </summary>
		public static void Visit(ParseResult result, Visitor visitor)
		{
			VisitASTNode(result.Root, visitor);
		}

		/// <summary>
		/// Walk the AST using a visitor
		/// </summary>
		public static void VisitASTNode(ASTNode node, Visitor visitor)
		{
			for (int i = 0; i < node.Children.Count; i++)
				VisitASTNode(node.Children[i], visitor);
			switch(node.Symbol.ID)
			{
				case 0x0007: visitor.OnTerminalBlockComment(node); break;
				case 0x0008: visitor.OnTerminalSeparator(node); break;
				case 0x000A: visitor.OnTerminalName(node); break;
				case 0x000B: visitor.OnTerminalInteger(node); break;
				case 0x000D: visitor.OnTerminalLiteralAny(node); break;
				case 0x000E: visitor.OnTerminalLiteralText(node); break;
				case 0x000F: visitor.OnTerminalUnicodeBlock(node); break;
				case 0x0010: visitor.OnTerminalUnicodeCategory(node); break;
				case 0x0011: visitor.OnTerminalUnicodeCodepoint(node); break;
				case 0x0012: visitor.OnVariableFile(node); break;
				case 0x0013: visitor.OnVariableCfGrammar(node); break;
				case 0x0014: visitor.OnVariableGrammarItem(node); break;
				case 0x0015: visitor.OnVariableGrammarOptions(node); break;
				case 0x0016: visitor.OnVariableOption(node); break;
				case 0x0017: visitor.OnVariableGrammarTerminals(node); break;
				case 0x0018: visitor.OnVariableTerminalRule(node); break;
				case 0x0019: visitor.OnVariableTerminalExpression(node); break;
				case 0x001A: visitor.OnVariableTerminalDifference(node); break;
				case 0x001B: visitor.OnVariableTerminalSequence(node); break;
				case 0x001C: visitor.OnVariableTerminalRepetition(node); break;
				case 0x001D: visitor.OnVariableTerminalElement(node); break;
				case 0x001E: visitor.OnVariableTerminalNot(node); break;
				case 0x001F: visitor.OnVariableTerminalAtom(node); break;
				case 0x0020: visitor.OnVariableRange(node); break;
				case 0x0021: visitor.OnVariableCharacter(node); break;
				case 0x0022: visitor.OnVariableText(node); break;
				case 0x0023: visitor.OnVariableTerminalCardinalilty(node); break;
				case 0x0024: visitor.OnVariableGrammarRules(node); break;
				case 0x0025: visitor.OnVariableRule(node); break;
				case 0x0026: visitor.OnVariableRuleExpression(node); break;
				case 0x0027: visitor.OnVariableRuleAlternative(node); break;
				case 0x0028: visitor.OnVariableRuleSequence(node); break;
				case 0x0029: visitor.OnVariableRuleRepetition(node); break;
				case 0x002A: visitor.OnVariableRuleTreeAction(node); break;
				case 0x002B: visitor.OnVariableRuleElement(node); break;
				case 0x002C: visitor.OnVariableRuleSub(node); break;
				case 0x002D: visitor.OnVariableRuleAtom(node); break;
				case 0x002E: visitor.OnVariableReference(node); break;
				case 0x0047: visitor.OnVirtualRange(node); break;
			}
		}
	}
}
