//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by the lingu compiler compiler. 
// from file: 'Expression.Grammar' DO NOT EDIT! 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace Lingu.CC
{
    using Lingu.Runtime.Commons;
    using Lingu.Runtime.Concretes;
    using Lingu.Runtime.Structures;
    
    public class ExpressionContext : Lingu.Runtime.Concretes.LinguContext
    {
        public ExpressionContext()
            : base(symbols, productions, CreateParseTable(), CreateDfaSet())
        {
        }
        public static IDfaSet CreateDfaSet()
        {
            byte[] bytes = 
            {
                204,5,0,2,139,1,1,17,1,2,2,2,3,3,1,1,1,1,1,1,1,1,2,4,2,10,20,3,5,6,7,8,8,8,9,9,7,7,7,7,7,7,7,7,8,10,8,2,9,2,1,1,1,11,11,1,12,1,2,13,1,
                1,1,1,1,1,1,5,3,13,14,14,2,8,22,9,5,6,7,8,11,5,6,7,1,3,3,14,5,7,7,7,15,15,7,16,7,2,94,7,7,7,7,7,7,7,5,9,13,8,5,11,13,1,5,14,15,5,6,7,7,
                9,9,11,11,14,5,15,13,7,15,15,16,1,40,40,1,45,45,1,48,48,1,49,57,3,65,90,95,95,97,122,1,48,57,4,48,57,65,90,95,95,97,122,1,37,37,1,42,42,
                1,43,43,1,47,47,1,60,60,1,62,62,1,46,46,1,41,41,1,44,44,18,6,2,11,1,3,1,12,1,2,1,2,1,1,5,1,9,1,1,2,2,3,3,4,4,5,3,9,1,5,4,1,6,5,1,1,17,
                1,15,11,1,17,1,15,1,16,1,13,1,11,1,12,1,14,2,2,1,9,2,20,1,10,7,7,1,8,3,9,4,1,5,10,6,11,7,12,9,1,7,2,5,3,1,11,8,1,3,1,12,10,1,17,12,1,17,
                1,15,1,16,1,13,1,11,1,12,1,5,1,14,2,2,1,9,2,22,1,10,8,7,1,8,3,9,4,1,5,13,6,10,7,11,8,12,10,1,7,2,6,3,1,11,9,1,3,1,12,11,1,21,12,1,17,1,
                15,1,16,1,13,1,11,1,12,1,5,1,14,1,6,1,9,2,22,1,10,8,7,1,8,3,9,4,1,5,13,6,10,7,11,8,12,10,1,7,2,6,3,1,11,9,1,3,1,12,11,1,1,2,2,9,1,1,1,
                4,1,1,6,1,3,2,9,1,7,1,1,2,12,1,4,2,1,4,1,6,2,2,2,5,1,4,1,14,1,1,1,12,2,14,1,15,1,16,1,4,1,13,1,11,1,12,1,14,2,2,1,9,2,22,1,10,8,7,1,14,
                3,8,4,9,5,1,6,10,7,11,8,12,10,1,7,2,6,3,1,11,9,1,3,1,12,11,1,1,13,2,16,1,15,1,16,1,4,1,13,1,11,1,12,1,5,1,14,2,2,1,9,2,24,1,10,9,7,1,14,
                3,8,4,9,5,1,6,13,7,10,8,11,9,12,11,1,7,2,7,3,1,11,10,1,3,1,12,12,1,1,13,2,20,1,15,1,16,1,4,1,13,1,11,1,12,1,5,1,14,1,6,1,9,2,24,1,10,9,
                7,1,14,3,8,4,9,5,1,6,13,7,10,8,11,9,12,11,1,7,2,7,3,1,11,10,1,3,1,12,12,1,8,2,1,17,1,5,1,13,1,1,12,3,1,17,1,5,1,6,2,13,1,11,2,2,1,2,2,
                5,1,7,1,12,1,1,1,3,2,9,1,8,1,7,2,15,1,12,2,2,1,3,2,9,1,4,1,5,2,14,1,13,2,2,1,4,2,13,1,4,1,5,1,6,3,14,1,13,2,11,3,3,2,1,1,2,
            };
            
            return new CompactDfaReader(new BinReader(new CompressReader().Uncompress(bytes))).Read();
        }
        
        public static IParseTable CreateParseTable()
        {
            byte[] bytes = 
            {
                232,13,0,8,139,1,17,36,29,1,5,9,8,1,13,21,1,1,8,9,44,48,52,56,60,64,68,72,1,8,9,1,1,1,1,1,1,1,1,1,4,1,1,3,9,18,18,18,18,18,18,18,18,18,
                4,1,1,3,9,1,1,1,1,1,1,1,1,1,4,2,1,56,2,9,1,1,1,1,1,1,1,1,1,4,2,212,1,3,10,1,1,1,1,1,1,1,1,1,1,16,2,208,1,5,1,1,13,1,1,16,1,1,4,16,132,
                2,136,2,140,2,144,2,148,2,152,2,156,2,160,2,4,1,1,4,8,1,1,1,1,1,1,1,1,4,3,1,200,1,3,8,1,1,1,1,1,1,1,1,4,2,1,1,3,8,1,1,1,1,1,1,1,1,4,4,
                1,1,144,2,2,8,1,1,1,1,1,1,1,1,5,2,220,1,11,1,1,4,1,1,11,1,1,4,3,1,164,2,10,1,1,6,1,1,16,3,1,236,1,15,2,1,1,12,3,1,136,3,3,8,1,1,1,1,1,
                1,1,1,5,2,152,3,11,1,1,6,3,1,152,3,12,3,1,236,2,15,2,1,1,15,4,1,1,180,3,14,3,1,216,3,12,7,31,1,5,9,13,17,21,2,9,25,29,33,37,41,45,49,53,
                57,38,1,1,2,6,189,1,1,5,9,13,10,1,49,3,5,1,5,9,13,17,10,1,21,3,5,37,1,5,9,13,10,1,17,3,5,41,1,5,9,13,10,1,17,3,5,45,1,5,9,13,10,1,17,3,
                5,49,1,5,9,13,10,1,17,3,5,53,1,5,9,13,10,1,17,3,5,57,1,5,9,13,10,1,17,3,5,61,1,5,9,13,10,1,17,6,3,253,1,1,19,2,1,5,11,7,213,1,1,5,9,13,
                17,2,9,21,25,29,33,37,41,45,49,53,3,6,213,1,1,5,9,13,10,1,49,2,7,233,1,1,5,9,13,17,2,9,21,25,29,33,37,41,45,49,53,3,6,157,1,1,5,9,13,10,
                1,17,6,3,217,2,1,31,1,1,4,3,185,2,1,19,3,177,1,1,17,3,193,1,1,18,1,1,11,7,249,2,1,5,9,13,17,2,9,21,25,29,33,37,41,45,49,53,3,5,121,1,5,
                9,13,10,1,17,6,3,241,2,1,17,3,173,2,1,17,3,137,1,1,19,3,129,2,1,15,3,149,1,1,13,1,65,1,1,5,2,1,1,1,3,1,38,2,1,3,1,46,3,1,3,1,50,3,1,7,
                1,117,4,113,2,70,5,1,3,1,6,1,1,3,1,10,1,1,3,1,14,1,1,3,1,18,1,1,3,1,22,1,1,3,1,26,1,1,3,1,30,1,1,3,1,34,1,1,3,1,42,3,1,3,1,66,6,1,3,1,
                54,3,1,3,1,185,1,1,1,125,1,1,65,1,4,13,3,229,1,1,5,205,1,4,229,1,1,5,209,1,5,229,1,1,5,209,1,6,229,1,1,5,209,1,7,229,1,1,5,209,1,8,229,
                1,1,5,209,1,9,229,1,1,5,209,1,10,229,1,1,5,209,1,11,62,7,1,13,1,65,8,25,12,82,9,153,2,13,165,2,10,1,3,1,38,11,1,3,1,46,12,1,3,1,50,12,
                1,9,1,134,1,13,201,2,2,70,14,1,3,1,6,10,1,3,1,10,10,1,3,1,14,10,1,3,1,18,10,1,3,1,22,10,1,3,1,26,10,1,3,1,30,10,1,3,1,34,10,1,3,1,42,12,
                1,3,1,66,15,1,3,1,54,12,1,3,1,185,1,1,5,129,1,14,185,1,1,5,133,1,15,122,3,1,3,1,90,1,1,3,1,46,1,1,3,1,50,1,1,9,1,134,1,16,221,2,2,70,17,
                1,3,1,42,1,1,3,1,66,18,1,3,1,54,1,1,3,1,185,1,1,5,129,1,16,229,1,1,5,209,1,17,94,1,1,3,1,98,1,1,3,1,102,1,1,3,1,106,1,1,3,1,110,1,1,3,
                1,114,1,1,3,1,118,1,1,8,1,65,8,25,18,130,1,5,1,4,1,245,2,19,1,9,1,146,1,20,249,2,19,86,21,1,3,1,58,3,1,3,1,153,3,1,5,129,3,4,153,3,1,5,
                133,3,5,153,3,1,5,133,3,6,153,3,1,5,133,3,7,153,3,1,5,133,3,8,153,3,1,5,133,3,9,153,3,1,5,133,3,10,153,3,1,5,133,3,11,62,22,1,15,1,185,
                1,8,145,1,20,82,9,157,2,21,209,3,10,1,3,1,122,12,1,3,1,62,23,1,15,1,229,1,8,221,1,12,82,9,157,2,22,225,3,10,1,3,1,122,1,1,3,1,126,5,1,
                3,1,74,5,1,3,1,78,24,1,9,1,161,2,8,233,3,23,90,10,1,3,1,46,10,1,3,1,50,10,1,9,1,134,1,25,237,3,2,70,26,1,3,1,42,10,1,3,1,66,27,1,3,1,54,
                10,1,3,1,185,1,1,5,129,1,24,153,3,1,5,133,3,25,94,10,1,3,1,98,10,1,3,1,102,10,1,3,1,106,10,1,3,1,110,10,1,3,1,114,10,1,3,1,118,10,1,10,
                1,185,1,8,145,1,26,130,1,14,1,4,1,133,4,19,1,3,1,58,12,1,10,1,229,1,8,221,1,27,130,1,17,1,4,1,141,4,19,1,3,1,58,1,1,10,1,161,2,8,145,4,
                23,142,1,21,1,3,1,62,28,1,15,1,153,3,8,145,3,28,82,9,157,2,29,161,4,10,1,3,1,122,10,1,3,1,126,14,1,3,1,74,14,1,3,1,126,17,1,3,1,74,17,
                1,4,1,138,1,21,1,10,1,153,3,8,145,3,30,130,1,26,1,4,1,169,4,19,1,3,1,58,10,1,3,1,126,26,1,3,1,74,26,1,1,1,
            };
            
            return new CompactTableReader(new BinReader(new CompressReader().Uncompress(bytes))).Read();
        }
        
        public static readonly TerminalSymbol identifier = new TerminalSymbol(0, "identifier", true, "");
        public static readonly TerminalSymbol number = new TerminalSymbol(1, "number", true, "");
        public static readonly TerminalSymbol __T1 = new TerminalSymbol(2, "__T1", false, "(");
        public static readonly TerminalSymbol __T2 = new TerminalSymbol(3, "__T2", false, ")");
        public static readonly TerminalSymbol __T3 = new TerminalSymbol(4, "__T3", false, ".");
        public static readonly TerminalSymbol __T4 = new TerminalSymbol(5, "__T4", false, "<");
        public static readonly TerminalSymbol __T5 = new TerminalSymbol(6, "__T5", false, ">");
        public static readonly TerminalSymbol __T6 = new TerminalSymbol(7, "__T6", true, ",");
        public static readonly TerminalSymbol __T7 = new TerminalSymbol(8, "__T7", false, "<<");
        public static readonly TerminalSymbol __T8 = new TerminalSymbol(9, "__T8", false, ">>");
        public static readonly TerminalSymbol __T9 = new TerminalSymbol(10, "__T9", false, "+");
        public static readonly TerminalSymbol __T10 = new TerminalSymbol(11, "__T10", false, "-");
        public static readonly TerminalSymbol __T11 = new TerminalSymbol(12, "__T11", false, "*");
        public static readonly TerminalSymbol __T12 = new TerminalSymbol(13, "__T12", false, "/");
        public static readonly TerminalSymbol __T13 = new TerminalSymbol(14, "__T13", false, "%");
        public static readonly TerminalSymbol __T14 = new TerminalSymbol(15, "__T14", false, "%%");
        public static readonly TerminalSymbol __eof = new TerminalSymbol(16, "__eof", false, "$eof$");
        public static readonly NonterminalSymbol expression = new NonterminalSymbol(17, "expression", false, RepeatKind.None);
        public static readonly NonterminalSymbol prefix = new NonterminalSymbol(18, "prefix", false, RepeatKind.None);
        public static readonly NonterminalSymbol primary = new NonterminalSymbol(19, "primary", false, RepeatKind.None);
        public static readonly NonterminalSymbol path = new NonterminalSymbol(20, "path", false, RepeatKind.None);
        public static readonly NonterminalSymbol pathPart = new NonterminalSymbol(21, "pathPart", false, RepeatKind.None);
        public static readonly NonterminalSymbol identifierWithArguments = new NonterminalSymbol(22, "identifierWithArguments", false, RepeatKind.None);
        public static readonly NonterminalSymbol typeArguments = new NonterminalSymbol(23, "typeArguments", false, RepeatKind.None);
        public static readonly NonterminalSymbol typeArgument = new NonterminalSymbol(24, "typeArgument", false, RepeatKind.None);
        public static readonly NonterminalSymbol shlOp = new NonterminalSymbol(25, "shlOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol shrOp = new NonterminalSymbol(26, "shrOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol addOp = new NonterminalSymbol(27, "addOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol subOp = new NonterminalSymbol(28, "subOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol mulOp = new NonterminalSymbol(29, "mulOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol divOp = new NonterminalSymbol(30, "divOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol remOp = new NonterminalSymbol(31, "remOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol modOp = new NonterminalSymbol(32, "modOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol negOp = new NonterminalSymbol(33, "negOp", false, RepeatKind.None);
        public static readonly NonterminalSymbol __N1 = new NonterminalSymbol(34, "__N1", false, RepeatKind.Star);
        public static readonly NonterminalSymbol __N2 = new NonterminalSymbol(35, "__N2", false, RepeatKind.Star);
        public static readonly TerminalSymbol newline = new TerminalSymbol(36, "newline", false, "");
        public static readonly TerminalSymbol newlineChar = new TerminalSymbol(37, "newlineChar", false, "");
        public static readonly TerminalSymbol whitespace = new TerminalSymbol(38, "whitespace", false, "");
        public static readonly TerminalSymbol lineComment = new TerminalSymbol(39, "lineComment", false, "");
        public static readonly TerminalSymbol blockComment = new TerminalSymbol(40, "blockComment", false, "");
        public static readonly TerminalSymbol spacing = new TerminalSymbol(41, "spacing", false, "");
        public static readonly TerminalSymbol identifierStart = new TerminalSymbol(42, "identifierStart", false, "");
        public static readonly TerminalSymbol identifierContinue = new TerminalSymbol(43, "identifierContinue", false, "");
        public static readonly TerminalSymbol digit = new TerminalSymbol(44, "digit", false, "");
        public static readonly TerminalSymbol nonzeroDigit = new TerminalSymbol(45, "nonzeroDigit", false, "");
        public static readonly TerminalSymbol zero = new TerminalSymbol(46, "zero", false, "");
        public static readonly NonterminalSymbol __acc = new NonterminalSymbol(47, "__acc", true, RepeatKind.None);
        
        private static readonly Symbol[] symbols = 
        {
            identifier,number,__T1,__T2,__T3,__T4,__T5,__T6,__T7,__T8,__T9,__T10,__T11,__T12,__T13,__T14,__eof,expression,prefix,primary,path,pathPart,
            identifierWithArguments,typeArguments,typeArgument,shlOp,shrOp,addOp,subOp,mulOp,divOp,remOp,modOp,negOp,__N1,__N2,newline,newlineChar,whitespace,
            lineComment,blockComment,spacing,identifierStart,identifierContinue,digit,nonzeroDigit,zero,__acc,
        };
        
        private static readonly Production[] productions = 
        {
            new Production(__acc, false, "__acc -> ^expression", false),
            new Production(expression, true, "expression -> ^shlOp", false),
            new Production(expression, true, "expression -> ^shrOp", false),
            new Production(expression, true, "expression -> ^addOp", false),
            new Production(expression, true, "expression -> ^subOp", false),
            new Production(expression, true, "expression -> ^mulOp", false),
            new Production(expression, true, "expression -> ^divOp", false),
            new Production(expression, true, "expression -> ^remOp", false),
            new Production(expression, true, "expression -> ^modOp", false),
            new Production(expression, true, "expression -> ^prefix", false),
            new Production(prefix, true, "prefix -> ^negOp", false),
            new Production(prefix, true, "prefix -> ^primary", false),
            new Production(primary, true, "primary -> ^path", false),
            new Production(primary, true, "primary -> ^ˈnumberˈ", false),
            new Production(primary, true, "primary -> ,'(' ^expression ,')'", true, false, true),
            new Production(path, false, "path -> ^pathPart ^__N1", false, false),
            new Production(pathPart, true, "pathPart -> ^ˈidentifierˈ", false),
            new Production(pathPart, true, "pathPart -> ^identifierWithArguments", false),
            new Production(identifierWithArguments, false, "identifierWithArguments -> ^ˈidentifierˈ ,'<' ^typeArguments ,'>'", false, true, false, true),
            new Production(typeArguments, false, "typeArguments -> ^typeArgument ^__N2", false, false),
            new Production(typeArguments, false, "typeArguments -> "),
            new Production(typeArgument, true, "typeArgument -> ^ˈidentifierˈ", false),
            new Production(shlOp, false, "shlOp -> ^prefix ,'<<' ^prefix", false, true, false),
            new Production(shrOp, false, "shrOp -> ^prefix ,'>>' ^prefix", false, true, false),
            new Production(addOp, false, "addOp -> ^prefix ,'+' ^prefix", false, true, false),
            new Production(subOp, false, "subOp -> ^prefix ,'-' ^prefix", false, true, false),
            new Production(mulOp, false, "mulOp -> ^prefix ,'*' ^prefix", false, true, false),
            new Production(divOp, false, "divOp -> ^prefix ,'/' ^prefix", false, true, false),
            new Production(remOp, false, "remOp -> ^prefix ,'%' ^prefix", false, true, false),
            new Production(modOp, false, "modOp -> ^prefix ,'%%' ^prefix", false, true, false),
            new Production(negOp, false, "negOp -> ,'-' ^prefix", true, false),
            new Production(__N1, false, "__N1 -> ^__N1 ,'.' ^pathPart", false, true, false),
            new Production(__N1, false, "__N1 -> ,'.' ^pathPart", true, false),
            new Production(__N1, false, "__N1 -> "),
            new Production(__N2, false, "__N2 -> ^__N2 ^',' ^typeArgument", false, false, false),
            new Production(__N2, false, "__N2 -> ^',' ^typeArgument", false, false),
            new Production(__N2, false, "__N2 -> "),
        };
    }
}
