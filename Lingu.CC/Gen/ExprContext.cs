//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by the lingu compiler compiler. 
// from file: 'Expr.Grammar' DO NOT EDIT! 
// 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace Lingu.CC
{
    using Lingu.Runtime.Commons;
    using Lingu.Runtime.Concretes;
    using Lingu.Runtime.Structures;
    
    public class ExprContext : Lingu.Runtime.Concretes.LinguContext
    {
        public ExprContext()
            : base(symbols, productions, CreateParseTable(), CreateDfaSet())
        {
        }
        public static IDfaSet CreateDfaSet()
        {
            byte[] bytes = 
            {
                192,1,0,1,48,1,8,1,2,1,1,1,1,2,2,5,8,3,4,3,3,3,3,4,4,1,3,1,1,1,1,4,1,1,1,2,4,5,3,3,3,3,3,1,53,3,3,3,4,1,3,3,11,1,40,40,1,48,48,1,49,57,
                3,65,90,95,95,97,122,1,48,57,4,48,57,65,90,95,95,97,122,1,42,42,1,43,43,1,45,45,1,47,47,1,41,41,6,5,2,9,1,3,1,2,1,2,1,1,4,1,7,1,1,2,2,
                3,3,4,2,9,1,4,3,1,5,4,1,1,9,1,20,5,1,9,1,7,1,5,1,6,1,8,4,6,1,7,2,8,3,9,4,4,1,2,2,5,1,4,1,10,1,1,1,6,2,21,1,4,1,7,1,5,1,6,1,8,5,10,1,6,
                2,7,3,8,4,9,5,5,2,1,1,2,
            };
            
            return new CompactDfaReader(new BinReader(new CompressReader().Uncompress(bytes))).Read();
        }
        
        public static IParseTable CreateParseTable()
        {
            byte[] bytes = 
            {
                179,2,0,7,48,9,15,7,1,5,9,14,1,1,4,5,20,24,28,32,1,4,5,1,1,1,1,1,3,1,1,8,5,1,104,108,112,116,4,5,1,1,1,1,1,1,7,6,1,5,9,13,17,21,7,1,1,
                4,19,81,1,5,9,13,17,85,1,5,9,13,17,125,1,5,9,13,17,29,1,1,5,2,1,1,1,3,1,22,2,1,3,1,6,1,1,3,1,10,1,1,3,1,14,1,1,3,1,18,1,1,3,1,26,3,1,3,
                1,30,3,1,2,1,81,1,1,57,1,1,97,1,3,93,2,97,1,3,109,2,97,1,3,113,2,97,1,4,117,2,121,4,1,3,1,22,5,1,3,1,6,4,1,3,1,10,4,1,3,1,14,4,1,3,1,18,
                4,1,3,1,26,6,1,3,1,30,6,1,2,1,81,1,4,61,3,38,1,1,3,1,26,1,1,3,1,30,1,1,2,1,81,1,4,61,4,42,1,1,3,1,46,1,1,3,1,50,1,1,3,1,34,3,1,3,1,153,
                1,1,5,149,1,2,153,1,1,5,165,1,2,153,1,1,5,169,1,2,153,1,1,6,173,1,2,177,1,4,1,4,1,181,1,4,1,3,1,38,4,1,3,1,26,4,1,3,1,30,4,1,2,1,81,1,
                4,61,5,42,4,1,3,1,46,4,1,3,1,50,4,1,3,1,34,6,1,3,1,34,1,1,4,1,189,1,4,1,3,1,34,4,1,1,1,
            };
            
            return new CompactTableReader(new BinReader(new CompressReader().Uncompress(bytes))).Read();
        }
        
        public static readonly TerminalSymbol id = new TerminalSymbol(0, "id", true, "");
        public static readonly TerminalSymbol num = new TerminalSymbol(1, "num", true, "");
        public static readonly TerminalSymbol __T1 = new TerminalSymbol(2, "__T1", false, "(");
        public static readonly TerminalSymbol __T2 = new TerminalSymbol(3, "__T2", false, ")");
        public static readonly TerminalSymbol __T3 = new TerminalSymbol(4, "__T3", false, "+");
        public static readonly TerminalSymbol __T4 = new TerminalSymbol(5, "__T4", false, "-");
        public static readonly TerminalSymbol __T5 = new TerminalSymbol(6, "__T5", false, "*");
        public static readonly TerminalSymbol __T6 = new TerminalSymbol(7, "__T6", false, "/");
        public static readonly TerminalSymbol __eof = new TerminalSymbol(8, "__eof", false, "$eof$");
        public static readonly NonterminalSymbol expr = new NonterminalSymbol(9, "expr", false, RepeatKind.None);
        public static readonly NonterminalSymbol prim = new NonterminalSymbol(10, "prim", false, RepeatKind.None);
        public static readonly NonterminalSymbol add = new NonterminalSymbol(11, "add", false, RepeatKind.None);
        public static readonly NonterminalSymbol sub = new NonterminalSymbol(12, "sub", false, RepeatKind.None);
        public static readonly NonterminalSymbol mul = new NonterminalSymbol(13, "mul", false, RepeatKind.None);
        public static readonly NonterminalSymbol div = new NonterminalSymbol(14, "div", false, RepeatKind.None);
        public static readonly TerminalSymbol newline = new TerminalSymbol(15, "newline", false, "");
        public static readonly TerminalSymbol newlineChar = new TerminalSymbol(16, "newlineChar", false, "");
        public static readonly TerminalSymbol whitespace = new TerminalSymbol(17, "whitespace", false, "");
        public static readonly TerminalSymbol lineComment = new TerminalSymbol(18, "lineComment", false, "");
        public static readonly TerminalSymbol blockComment = new TerminalSymbol(19, "blockComment", false, "");
        public static readonly TerminalSymbol separator = new TerminalSymbol(20, "separator", false, "");
        public static readonly TerminalSymbol identifierStart = new TerminalSymbol(21, "identifierStart", false, "");
        public static readonly TerminalSymbol identifierContinue = new TerminalSymbol(22, "identifierContinue", false, "");
        public static readonly TerminalSymbol digit = new TerminalSymbol(23, "digit", false, "");
        public static readonly TerminalSymbol nonzeroDigit = new TerminalSymbol(24, "nonzeroDigit", false, "");
        public static readonly TerminalSymbol zero = new TerminalSymbol(25, "zero", false, "");
        public static readonly NonterminalSymbol __acc = new NonterminalSymbol(26, "__acc", true, RepeatKind.None);
        
        private static readonly Symbol[] symbols = 
        {
            id,num,__T1,__T2,__T3,__T4,__T5,__T6,__eof,expr,prim,add,sub,mul,div,newline,newlineChar,whitespace,lineComment,blockComment,separator,identifierStart,
            identifierContinue,digit,nonzeroDigit,zero,__acc,
        };
        
        private static readonly Production[] productions = 
        {
            new Production(__acc, false, "__acc -> ^expr", false),
            new Production(expr, true, "expr -> ^add", false),
            new Production(expr, true, "expr -> ^sub", false),
            new Production(expr, true, "expr -> ^mul", false),
            new Production(expr, true, "expr -> ^div", false),
            new Production(expr, true, "expr -> ^prim", false),
            new Production(prim, true, "prim -> ^ˈidˈ", false),
            new Production(prim, true, "prim -> ^ˈnumˈ", false),
            new Production(prim, true, "prim -> ,'(' ^expr ,')'", true, false, true),
            new Production(add, false, "add -> ^prim ,'+' ^prim", false, true, false),
            new Production(sub, false, "sub -> ^prim ,'-' ^prim", false, true, false),
            new Production(mul, false, "mul -> ^prim ,'*' ^prim", false, true, false),
            new Production(div, false, "div -> ^prim ,'/' ^prim", false, true, false),
        };
    }
}
